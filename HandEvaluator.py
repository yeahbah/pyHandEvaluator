import numpy
from enum import Enum
from multipledispatch import dispatch
import threading
import random

from numpy.lib.function_base import disp

lock = threading.Lock()

class HoldemHand:

    # Possible types of hands in a texas holdem game
    class HandTypes:
        HIGH_CARD = 0
        PAIR = 1
        TWO_PAIR = 2
        TRIPS = 3
        STRAIGHT = 4
        FLUSH = 5
        FULLHOUSE = 6
        FOUR_OF_A_KIND = 7
        STRAIGHT_FLUSH = 8
    

    # Constants    
    CLUBS = 0
    DIAMONDS = 1    
    HEARTS = 2
    SPADES = 3

    RANK2 = 0
    RANK3 = 1
    RANK4 = 2
    RANK5 = 3
    RANK6 = 4
    RANK7 = 5
    RANK8 = 6
    RANK9 = 7
    RANK_TEN = 8
    RANK_JACK = 9
    RANK_QUEEN = 10
    RANK_KING = 11
    RANK_ACE = 12

    CARD_JOKER = 52
    NUMBER_OF_CARDS = 52
    NUMBER_OF_CARDS_WITH_JOKER = 53

    HANDTYPE_SHIFT = 24
    TOP_CARD_SHIFT = 16
    TOP_CARD_MASK = 0x000F0000
    SECOND_CARD_SHIFT = 12
    SECOND_CARD_MASK: numpy.uint32 = 0x0000F000
    THIRD_CARD_SHIFT = 8
    FOURTH_CARD_SHIFT = 4
    FIFT_CARD_SHIFT = 0
    FIFTH_CARD_MASK: numpy.uint32 = 0x0000000F

    CARD_WIDTH = 4
    CARD_MASK: numpy.uint32 = 0x0F

    # Hand mask for the current card set
    __handMask: numpy.uint64

    __pocket: str = ""

    __board: str = ""

    __handVal: numpy.uint32

    def set_PocketCards(self, pocketHand: str):
        if __debug__:
            if not pocketHand: 
                raise Exception("Pocket Hand must have a value")            
            if len(pocketHand.strip()) <= 0 or not HoldemHand.ValidateHand(pocketHand):
                raise Exception("Invalid pocket hand")

        self.__pocket = pocketHand.strip()
        self.UpdateHandMask()
    
    def get_PocketCards(self):
        return self.__pocket

    def set_Board(self, board: str):
        if __debug__:
            if not board or len(board.strip()) <= 0 or not HoldemHand.ValidateHand(board):
                raise Exception("Invalid board")
        self.__board = board
        self.UpdateHandMask()
    
    def get_Board(self):
        return self.__board

    def UpdateHandMask(self):
        handMaskTuple = HoldemHand.ParseHand(self.get_PocketCards(), self.get_Board())
        self.__handMask = handMaskTuple[0]
        self.__handVal = HoldemHand.Evaluate(handMaskTuple[0], handMaskTuple[1])

    # default constructor
    @dispatch()
    def __init__(self):
        self.__pocket = self.__board = ""
    
    @dispatch(str, str)
    def __init__(self, pocket: str, board: str):
        if __debug__:
            if not pocket: raise Exception("Pocket hand is not defined")

        HoldemHand.set_PocketCards(self, pocket)
        HoldemHand.set_Board(self, board)
    
    def __eq__(self, other):        
        return self.HandValue() == other.HandValue()
    
    def __lt__(self, other):
        return self.HandValue() < other.HandValue()
    
    def __gt__(self, other):
        return self.HandValue() > other.HandValue()
        
    # This function takes a string representing a full or partial holdem mask 
    # and validates that the text represents valid cards and that no card is
    # duplicated.
    # hand - mask to validate
    # returns true if a valid mask, false otherwise
    @staticmethod
    @dispatch(str)
    def ValidateHand(hand: str):
        if __debug__:
            if not hand: return False

        handmask: numpy.uint64 = 0        
        cards = 0
        try:
            card = HoldemHand.__NextCard(hand, 0) # return tuple(card, handIteratorIndex)
            while card[0] >= 0:
                if handmask & 1 << card[0] != 0:
                    return False
                handmask |= 1 << card[0]
                cards += 1
                card = HoldemHand.__NextCard(hand, card[1])
            
            return card[0] == -1 and cards > 0 and card[1] >= len(hand)
        except:
            return False
    # end ValidateHand        

    # This function takes a string representing pocket cards and a board and then 
    # validates that the text represents a valid mask.
    # pocket - Pocket cards as a string
    # board - Board cards as a string
    @staticmethod
    @dispatch(str, str)
    def ValidateHand(pocket: str, board: str):
        if __debug__:
            if not pocket or len(pocket.strip()) == 0: 
                raise Exception("Pocket hand is not defined")

        return HoldemHand.ValidateHand(pocket + " " + board)

    # Parses card strings (internal)
    # cards - string containing mask definition
    # index - iterator into card string
    # returns a tuple (resultingCard, newValueOfIndex)
    def __NextCard(cards: str, index: int):
        rank = suit = 0
        if not cards: raise Exception("Cards must be defined")

        while index < len(cards) and cards[index] == ' ':
            index += 1
        
        if (index >= len(cards)):
            return (-1, index)
        
        # parse cards
        if (index < len(cards)):
            currentCard = cards[index]
            index += 1

            if (currentCard == '1'):
                try:
                    if (currentCard == '0'):
                        index += 1
                        rank = HoldemHand.RANK_TEN
                    else:
                        return (-1, index)
                except: 
                    raise Exception("Bad hand string")

            elif currentCard == '2':
                rank = HoldemHand.RANK2
            elif currentCard == '3':
                rank = HoldemHand.RANK3
            elif currentCard == '4':
                rank = HoldemHand.RANK4
            elif currentCard == '5':
                rank = HoldemHand.RANK5
            elif currentCard == '6':
                rank = HoldemHand.RANK6
            elif currentCard == '7':
                rank = HoldemHand.RANK7
            elif currentCard == '8':
                rank = HoldemHand.RANK8
            elif currentCard == '9':
                rank = HoldemHand.RANK9
            elif currentCard == 'T' or currentCard == 't':
                rank = HoldemHand.RANK_TEN
            elif currentCard == 'J' or currentCard == 'j':
                rank = HoldemHand.RANK_JACK
            elif currentCard == 'Q' or currentCard == 'q':
                rank = HoldemHand.RANK_QUEEN
            elif currentCard == 'K' or currentCard == 'k':
                rank = HoldemHand.RANK_KING
            elif currentCard == 'A' or currentCard == 'a':
                rank = HoldemHand.RANK_ACE
            else:
                return (-2, index)
        else:
            return (-2, index)
        
        if index < len(cards):
            currentCard = cards[index]
            index += 1
            if currentCard == 'H' or currentCard == 'h':
                suit = HoldemHand.HEARTS
            elif currentCard == 'D' or currentCard == 'd':
                suit = HoldemHand.DIAMONDS
            elif currentCard == 'C' or currentCard == 'c':
                suit = HoldemHand.CLUBS
            elif currentCard == 'S' or currentCard == 's':
                suit = HoldemHand.SPADES
            else:
                return (-2, index)
        else:
            return (-2, index)
        
        result = rank + (suit * 13)
        return (result, index)

    # end __NextCard
        
    
    # Parse hand
    # hand - hand string
    # returns a tuple, (numpy.uint64, numberOfCards)
    @staticmethod
    @dispatch(str)    
    def ParseHand(hand: str):
        handmask: numpy.uint64 = 0

        if __debug__:
            if not hand: 
                raise Exception("Hand is not defined")

        if len(hand.strip()) == 0:
            return (0, 0)
        
        if __debug__:
            if not HoldemHand.ValidateHand(hand):
                raise Exception("Bad hand definition")
    
        # Parse the mask
        cards = 0
        card = HoldemHand.__NextCard(hand, 0)
        while card[0] >= 0:
            handmask |= 1 << card[0]
            cards += 1
            card = HoldemHand.__NextCard(hand, card[1])
        
        return (handmask, cards)
    #end ParseHand

    # This static method parses the passed pocket cards and board and produces
    # a card mask.
    # pocket - ASCII string representing pocket cards
    # board - ASCII string representing board    
    @staticmethod
    @dispatch(str, str)
    def ParseHand(pocket: str, board: str):
        return HoldemHand.ParseHand(pocket +" "+ board)

    # Reads a string definition of a card and returns the Card value.
    # card - card string
    @staticmethod
    def ParseCard(card: str):
        if __debug__:
            if not card: raise Exception("Card is not defined")

        return HoldemHand.__NextCard(card, 0)[0]

    # Given a card value, return its rank
    # card - card value
    # returns rank
    @staticmethod
    def CardRank(card: int):
        if __debug__:
            if card < 0 or card > 52:
                raise Exception("Invalid card value")

        return card % 13

    # Given a card value, returns its suit
    @staticmethod
    def CardSuit(card: int):
        if __debug__:
            if card < 0 or card > 52:
                raise Exception("Invalid card value")
            
        return card / 13    

    @staticmethod
    def HandType(handValue: int):
        return handValue >> HoldemHand.HANDTYPE_SHIFT

    @staticmethod
    def DescriptionFromMask(cards: int):
        numberOfCards = HoldemHand.BitCount(cards)

        # This function support 1-7 cards
        if __debug__:
            if numberOfCards < 1 or numberOfCards > 7:
                raise Exception("Invalid number of cards")

        # separate out by suit
        sc = numpy.uint32(cards >> HoldemHand.__ClubOffset()) & numpy.uint64(0x1FFF)
        sd = numpy.uint32(cards >> HoldemHand.__DiamondOffset()) & numpy.uint64(0x1FFF)
        sh = numpy.uint32(cards >> HoldemHand.__HeartOffset()) & numpy.uint64(0x1FFF)
        ss = numpy.uint32(cards >> HoldemHand.__SpadeOffset()) & numpy.uint64(0x1FFF)

        handValue = HoldemHand.Evaluate(cards, numberOfCards)
        handType = HoldemHand.HandType(handValue)
        if handType == HoldemHand.HandTypes.HIGH_CARD or \
            handType == HoldemHand.HandTypes.PAIR or \
            handType == HoldemHand.HandTypes.TWO_PAIR or \
            handType == HoldemHand.HandTypes.TRIPS or \
            handType == HoldemHand.HandTypes.STRAIGHT or \
            handType == HoldemHand.HandTypes.FULLHOUSE or \
            handType == HoldemHand.HandTypes.FOUR_OF_A_KIND:
            return HoldemHand.__DescriptionFromHandValueInternal(handValue)
        
        if handType == HoldemHand.HandTypes.FLUSH:
            flushDescription = "Flush ({0}) with {1} high"
            if HoldemHand.__nBitsTable[ss] >= 5:
                return flushDescription.format("Spades", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            elif HoldemHand.__nBitsTable[sc] >= 5:
                return flushDescription.format("Clubs", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            elif HoldemHand.__nBitsTable[sd] >= 5:
                return flushDescription.format("Diamonds", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            elif HoldemHand.__nBitsTable[sh] >= 5:
                return flushDescription.format("Hearts", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
        
        if handType == HoldemHand.HandTypes.STRAIGHT_FLUSH:
            flushDescription = "Straight Flush ({0}) with {1} high"
            if HoldemHand.__nBitsTable[ss] >= 5:
                return flushDescription.format("Spades", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            elif HoldemHand.__nBitsTable[sc] >= 5:
                return flushDescription.format("Clubs", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            elif HoldemHand.__nBitsTable[sd] >= 5:
                return flushDescription.format("Diamonds", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            elif HoldemHand.__nBitsTable[sh] >= 5:
                return flushDescription.format("Hearts", HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])

        raise Exception("Invalid hand type") # should never get here
        
    #end DescriptionFromMask

    # Takes a string describing a mask and returns the description
    @staticmethod
    def DescriptionFromHand(hand: str):
        if __debug__:
            if not hand:
                raise Exception("Hand is not defined")
        mask = HoldemHand.ParseHand(hand)
        return HoldemHand.DescriptionFromMask(mask[0])
    
    # Returns the string representing the mask
    def ToString(self):
        return self.get_PocketCards() +" "+ self.get_Board()
    
    # Returns the hand mask value
    def MaskValue(self):
        return self.__handMask
    
    def set_PocketMask(self, value: str):
        self.set_PocketCards(self.MaskToString(value))
    
    def get_PocketMask(self):
        mask = HoldemHand.ParseHand(self.get_PocketCards())
        return mask[0]
    
    @staticmethod
    def MaskToString(mask: int):
        result = []
        count = 0
        for s in HoldemHand.Cards(mask):
            if count != 0:
                result.append(" ")
            result.append(s)
            count += 1

        return "".join(result)
    
    # Represents the mask of the Board cards for this instance
    def get_BoardMask(self):
        mask = HoldemHand.ParseHand(self.get_Board())
        return mask[0]

    def set_BoardMask(self, value: str):
        self.__board = HoldemHand.MaskToString(value)
    
    # Returns the mask value. This value may be used
    # to compare one mask to another using standard numeric
    # compares
    def HandValue(self):
        return self.__handVal
    
    # Returns a textual description of the current mask
    def Description(self):
        return HoldemHand.DescriptionFromMask(self.MaskValue())
    
    # Returns the current mask type    
    def HandTypeDescription(self):
        handType = HoldemHand.HandType(self.HandValue())
        return HoldemHand.GetHandTypeDescription(handType)

    @staticmethod
    def GetHandTypeDescription(handType: int):
        if handType == HoldemHand.HandTypes.HIGH_CARD:
            return "High Card"
        elif handType == HoldemHand.HandTypes.FLUSH:
            return "Flush"
        elif handType == HoldemHand.HandTypes.FOUR_OF_A_KIND:
            return "Four Of a Kind"
        elif handType == HoldemHand.HandTypes.FULLHOUSE:
            return "Fullhouse"
        elif handType == HoldemHand.HandTypes.PAIR:
            return "Pair"
        elif handType == HoldemHand.HandTypes.TWO_PAIR:
            return "Two Pair"
        elif handType == HoldemHand.HandTypes.TRIPS:
            return "Trips"
        elif handType == HoldemHand.HandTypes.STRAIGHT:
            return "Straight"
        elif handType == HoldemHand.HandTypes.STRAIGHT_FLUSH:
            return "Straight Flush"
        
        raise Exception("Invalid hand type") # should not get here
    
    # This is a fast way to look up the index mask.
    @staticmethod
    def Mask(index: int):
        return HoldemHand.__CardMasksTable[index]
    
    @staticmethod
    def CardMask(cards: int, suit: int):
        return (cards >> (13 * suit)) & 0x1FFF

    @staticmethod
    @dispatch(int, int)
    def Evaluate(cards: int, numberOfCards: int):
        retval = 0
        four_mask = 0
        three_mask = 0
        two_mask = 0

        if __debug__:
            if numberOfCards < 1 or numberOfCards > 7:
                raise Exception("Invalid number of cards")

        # separate out by suit
        sc = numpy.uint32(cards >> HoldemHand.__ClubOffset()) & numpy.uint64(0x1FFF)
        sd = numpy.uint32(cards >> HoldemHand.__DiamondOffset()) & numpy.uint64(0x1FFF)
        sh = numpy.uint32(cards >> HoldemHand.__HeartOffset()) & numpy.uint64(0x1FFF)
        ss = numpy.uint32(cards >> HoldemHand.__SpadeOffset()) & numpy.uint64(0x1FFF)

        ranks = sc | sd | sh | ss
        n_ranks = HoldemHand.__nBitsTable[ranks]
        n_dups = numpy.uint32(numberOfCards - n_ranks)

        # Check for straight, flush, or straight flush, and return if we can
        # determine immediately that this is the best possible mask 
        if n_ranks >= 5:
            if HoldemHand.__nBitsTable[ss] >= 5:
                if HoldemHand.__StraightTable[ss] != 0:
                    return HoldemHand.__HandTypeValueStraightFlush() + (HoldemHand.__StraightTable[ss] << HoldemHand.TOP_CARD_SHIFT)
                else:
                    retval = HoldemHand.__HandTypeValueFlush() + HoldemHand.__TopFiveCardsTable[ss]
            
            elif HoldemHand.__nBitsTable[sc] >= 5:
                if (HoldemHand.__StraightTable[sc] != 0):
                    return HoldemHand.__HandTypeValueStraightFlush() + (HoldemHand.__StraightTable[sc] << HoldemHand.TOP_CARD_SHIFT)
                else:
                    retval = HoldemHand.__HandTypeValueFlush() + HoldemHand.__TopFiveCardsTable[sc]

            elif HoldemHand.__nBitsTable[sd] >= 5:
                if (HoldemHand.__StraightTable[sd] != 0):
                    return HoldemHand.__HandTypeValueStraightFlush() + (HoldemHand.__StraightTable[sd] << HoldemHand.TOP_CARD_SHIFT)
                else:
                    retval = HoldemHand.__HandTypeValueFlush() + HoldemHand.__TopFiveCardsTable[sd]
                    
            elif HoldemHand.__nBitsTable[sh] >= 5:
                if (HoldemHand.__StraightTable[sh] != 0):
                    return HoldemHand.__HandTypeValueStraightFlush() + (HoldemHand.__StraightTable[sh] << HoldemHand.TOP_CARD_SHIFT)
                else:
                    retval = HoldemHand.__HandTypeValueFlush() + HoldemHand.__TopFiveCardsTable[sh]

            else:
                st: numpy.uint32 = HoldemHand.__StraightTable[ranks]
                if st != 0:
                    retval = HoldemHand.__HandTypeValueStraight() + (st << HoldemHand.TOP_CARD_SHIFT)

             
            # Another win -- if there can't be a FH/Quads (n_dups < 3), 
            # which is true most of the time when there is a made mask, then if we've
            # found a five card mask, just return.  This skips the whole process of
            # computing two_mask/three_mask/etc.                                                            
            if retval != 0 and n_dups < 3:
                return retval
        
        # By the time we're here, either: 
        #   1) there's no five-card mask possible (flush or straight), or
        #   2) there's a flush or straight, but we know that there are enough
        #       duplicates to make a full house / quads possible.  
        if n_dups == 0:
            return HoldemHand.__HandTypeValueHighCard() + HoldemHand.__TopFiveCardsTable[ranks]    
        elif n_dups == 1:
            kickers: numpy.uint32
            t: numpy.uint32

            two_mask = ranks ^ (sc ^ sd ^ sh ^ ss)
            retval = numpy.uint32(HoldemHand.__HandTypeValuePair() + (HoldemHand.__TopCardTable[two_mask] << HoldemHand.TOP_CARD_SHIFT))
            t = ranks ^ two_mask # Only one bit set in two_mask
            # Get the top five cards in what is left, drop all but the top three
            # cards, and shift them by one to get the three desired kickers
            kickers = (HoldemHand.__TopFiveCardsTable[t] >> HoldemHand.CARD_WIDTH) & ~HoldemHand.FIFTH_CARD_MASK
            retval += kickers
            return retval

        elif n_dups == 2:
            # either two pair or trips
            two_mask = ranks ^ (sc ^ sd ^ sh ^ ss)
            if two_mask != 0:
                t = ranks ^ two_mask # exactly two bits set in two_mask
                retval = numpy.uint32(HoldemHand.__HandTypeValueTwoPair() \
                    + (HoldemHand.__TopFiveCardsTable[two_mask] \
                    & (HoldemHand.TOP_CARD_MASK | HoldemHand.SECOND_CARD_MASK)) \
                    + (HoldemHand.__TopCardTable[t] << HoldemHand.THIRD_CARD_SHIFT))
                
                return retval
            else:
                t: numpy.uint32
                second: numpy.uint32
                three_mask = ((sc & sd) | (sh & ss)) & ((sc & sh) | (sd & ss))
                retval = HoldemHand.__HandTypeValueTrips() + (HoldemHand.__TopCardTable[three_mask] << HoldemHand.TOP_CARD_SHIFT)
                t = ranks ^ three_mask # Only one bit set in three_mask
                second = numpy.uint32(HoldemHand.__TopCardTable[t])
                retval += (second << HoldemHand.SECOND_CARD_SHIFT)
                t ^= (numpy.uint32(1) << second)
                retval += HoldemHand.__TopCardTable[t] << HoldemHand.THIRD_CARD_SHIFT
                return retval
        else:
            # possible quads, fullhouse, straight or flush, or two pair
            four_mask = sh & sd & sc & ss
            if four_mask != 0:
                tc = HoldemHand.__TopCardTable[four_mask]
                retval = numpy.uint32(HoldemHand.__HandTypeValueFourOfAKind() \
                    + (tc << HoldemHand.TOP_CARD_SHIFT) \
                    + ((HoldemHand.__TopCardTable[ranks ^ (numpy.uint64(1) << numpy.uint32(tc)) ]) << HoldemHand.SECOND_CARD_SHIFT))
                return retval
            
            # Technically, three_mask as defined below is really the set of
            #    bits which are set in three or four of the suits, but since
            #    we've already eliminated quads, this is OK */
            # Similarly, two_mask is really two_or_four_mask, but since we've
            #    already eliminated quads, we can use this shortcut */

            two_mask = ranks ^ (sc ^ sd ^ sh ^ ss)
            if HoldemHand.__nBitsTable[two_mask] != n_dups:
                # Must be some trips then, which really means there is a 
                # full house since n_dups >= 3 
                tc: numpy.uint32
                t: numpy.uint32
                three_mask = ((sc & sd) | (sh & ss)) & ((sc & sh) | (sd & ss))
                retval = HoldemHand.__HandTypeValueFullhouse()
                tc = HoldemHand.__TopCardTable[three_mask]
                retval += (tc << HoldemHand.TOP_CARD_SHIFT)
                t = (two_mask | three_mask) ^ (numpy.uint64(1) << numpy.uint32(tc))
                retval += numpy.uint32(HoldemHand.__TopCardTable[t] << HoldemHand.SECOND_CARD_SHIFT)
                
                return retval
            
            if retval != 0: # flush and straight
                return retval
            else:
                # Must be two pair
                top: numpy.uint32
                second: numpy.uint32

                retval = HoldemHand.__HandTypeValueTwoPair()
                top = HoldemHand.__TopCardTable[two_mask]
                retval += (top << HoldemHand.TOP_CARD_SHIFT)
                second = HoldemHand.__TopCardTable[two_mask ^ (1 << numpy.uint32(top))]
                retval += (second << HoldemHand.SECOND_CARD_SHIFT)
                retval += numpy.uint32( (HoldemHand.__TopCardTable[ranks ^ ( numpy.uint64(1) << numpy.uint32(top) ) ^ (1 << numpy.uint32(second) )]) << HoldemHand.THIRD_CARD_SHIFT )
                return retval
            
    #end Evaluate()
    
    @staticmethod
    @dispatch(str)
    def Evaluate(hand: str):
        handMask = HoldemHand.ParseHand(hand)
        return HoldemHand.Evaluate(handMask[0], handMask[1])
    
    # Evaluates the card mask and returns the type of mask it is. This function is
    # faster (but provides less information) than Evaluate or Evaluate.
    # mask - card mask
    # returns hand type
    @staticmethod
    @dispatch(int)
    def EvaluateType(mask: int):
        numberOfCards = HoldemHand.BitCount(mask)
        if __debug__:            
            if numberOfCards <= 0 or numberOfCards > 7:
                raise Exception("Invalid mask")
        return HoldemHand.EvaluateType(mask, numberOfCards)

    # This function is faster (but provides less information) than Evaluate or Evaluate.
    # mask - card mask
    # numberOfCards - number of cards in mask
    # returns the tuple: (hand type, description)
    @staticmethod
    @dispatch(int, int)
    def EvaluateType(mask: int, numberOfCards: int):
        is_st_or_fl = HoldemHand.HandTypes.HIGH_CARD
        ss = (mask >> HoldemHand.__SpadeOffset()) & 0x1fff
        sc = (mask >> HoldemHand.__ClubOffset()) & 0x1fff
        sd = (mask >> HoldemHand.__DiamondOffset()) & 0x1fff
        sh = (mask >> HoldemHand.__HeartOffset()) & 0x1fff

        ranks = sc | sd | sh | ss
        rankinfo = HoldemHand.__nBitsAndStrTable[ranks]
        n_dups = (numberOfCards - (rankinfo >> 2))

        if (rankinfo & 0x01) != 0:
            if (rankinfo & 0x02) != 0:
                is_st_or_fl = HoldemHand.HandTypes.STRAIGHT
            
            t = HoldemHand.__nBitsAndStrTable[ss] | HoldemHand.__nBitsAndStrTable[sc] | HoldemHand.__nBitsAndStrTable[sd] | HoldemHand.__nBitsAndStrTable[sh]
            if (t & 0x01) != 0:
                if (t & 0x02) != 0:
                    return (HoldemHand.HandTypes.STRAIGHT_FLUSH, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.STRAIGHT_FLUSH))
                else:
                    is_st_or_fl = HoldemHand.HandTypes.FLUSH
            
            if is_st_or_fl != 0 and n_dups < 3:
                return (is_st_or_fl, HoldemHand.GetHandTypeDescription(is_st_or_fl));
        
        if n_dups == 0:
            return (HoldemHand.HandTypes.HIGH_CARD, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.HIGH_CARD))
        elif n_dups == 1:
            return (HoldemHand.HandTypes.PAIR, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.PAIR))
        elif n_dups == 2:
            if (ranks ^ (sc ^ sd ^ sh ^ ss)) != 0:
                return (HoldemHand.HandTypes.TWO_PAIR, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.TWO_PAIR))
            else:
                return (HoldemHand.HandTypes.TRIPS, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.TRIPS))
        else:
            if (((sc & sd) & (sh & ss)) != 0): 
                return (HoldemHand.HandTypes.FOUR_OF_A_KIND, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.FOUR_OF_A_KIND))
            elif ((((sc & sd) | (sh & ss)) & ((sc & sh) | (sd & ss))) != 0): 
                return (HoldemHand.HandTypes.FULLHOUSE, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.FULLHOUSE));
            elif (is_st_or_fl != 0): 
                return (is_st_or_fl, HoldemHand.GetHandTypeDescription(is_st_or_fl));
            else: 
                return (HoldemHand.HandTypes.TwoPair, HoldemHand.GetHandTypeDescription(HoldemHand.HandTypes.TWO_PAIR));    
    #end EvaluateType    
    
    @staticmethod
    def __DescriptionFromHandValueInternal(handValue: numpy.uint32):
        result = []
        handType = HoldemHand.HandType(handValue)
        if handType == HoldemHand.HandTypes.HIGH_CARD:
            result.append("High card: ")
            result.append(HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            return "".join(result)

        if handType == HoldemHand.HandTypes.PAIR:
            result.append("One pair, ")
            result.append(HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            return "".join(result)
        
        if handType == HoldemHand.HandTypes.TWO_PAIR:
            result.append("Two pair, ")
            result.append(HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            result.append("'s and ")
            result.append(HoldemHand.__RankTable[HoldemHand.SecondCard(handValue)])
            result.append("'s with a")
            result.append(HoldemHand.__RankTable[HoldemHand.ThirdCard(handValue)])
            result.append(" for a kicker")
            return "".join(result)
        
        if handType == HoldemHand.HandTypes.TRIPS:
            result.append("Three of a kind, ")
            result.append(HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            result.append("'s")
            return "".join(result)

        if handType == HoldemHand.HandTypes.STRAIGHT:
            result.append("A straight, ")
            result.append(HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            result.append(" high")
            return "".join(result)
        
        if handType == HoldemHand.HandTypes.FLUSH:
            result.append("A flush")
            return "".join(result)
        
        if handType == HoldemHand.HandTypes.FULLHOUSE:
            result.append("A fullhouse, ")
            result.append(HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            result.append("'s and ")
            result.append(HoldemHand.__RankTable[HoldemHand.SecondCard(handValue)])
            result.append("'s")
            return "".join(result)

        if handType == HoldemHand.HandTypes.FOUR_OF_A_KIND:
            result.append("Four of a kind, ")
            result.append(HoldemHand.__RankTable[HoldemHand.TopCard(handValue)])
            result.append("'s")
            return "".join(result)

        if handType == HoldemHand.HandTypes.STRAIGHT_FLUSH:
            result.append("A straight flush")
            return "".join(result)
        
        raise Exception("Invalid hand value") # should never get here    
    #end DescriptionFromHandValueInternal

    # Count bits. Optimized for cards so only works with 52 bits
    @staticmethod
    def BitCount(bitField: numpy.uint64):
        return HoldemHand.__nBitsTable[bitField & 0x1FFF] + \
            HoldemHand.__nBitsTable[(bitField >> 13) & 0x1FFF] + \
            HoldemHand.__nBitsTable[(bitField >> 26) & 0x1FFF] + \
            HoldemHand.__nBitsTable[(bitField >> 39) & 0x1FFF]

    
    # returns uint32
    @staticmethod
    def TopCard(handValue: numpy.uint32):
        return (handValue >> HoldemHand.TOP_CARD_SHIFT) & HoldemHand.CARD_MASK
    
    @staticmethod
    def SecondCard(handValue: numpy.uint32):
        return (handValue >> HoldemHand.SECOND_CARD_SHIFT) & HoldemHand.CARD_MASK

    @staticmethod
    def ThirdCard(handValue: numpy.uint32):
        return (handValue >> HoldemHand.THIRD_CARD_SHIFT) & HoldemHand.CARD_MASK
    
    @staticmethod
    def FourthCard(handValue: numpy.uint32):
        return (handValue >> HoldemHand.FOURTH_CARD_SHIFT) & HoldemHand.CARD_MASK
    
    @staticmethod
    def FifthCard(handValue: numpy.uint32):
        return (handValue >> HoldemHand.FIFT_CARD_SHIFT) & HoldemHand.CARD_MASK
    
    @staticmethod
    @dispatch(int)
    def HandTypeValue(handType: int):
        return numpy.uint32(handType) << HoldemHand.HANDTYPE_SHIFT

    # Converts card number into the card rank text string    
    __RankTable = ["Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace",
                "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace",
                "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace",
                "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace"]

    @staticmethod
    def __HandTypeValueStraightFlush():
        return HoldemHand.HandTypes.STRAIGHT_FLUSH << HoldemHand.HANDTYPE_SHIFT
    
    @staticmethod
    def __HandTypeValueStraight():
        return numpy.uint32(HoldemHand.HandTypes.STRAIGHT) << HoldemHand.HANDTYPE_SHIFT

    @staticmethod
    def __HandTypeValueFlush():
        return numpy.uint32(HoldemHand.HandTypes.FLUSH) << HoldemHand.HANDTYPE_SHIFT

    @staticmethod
    def __HandTypeValueFullhouse():
        return numpy.uint32(HoldemHand.HandTypes.FULLHOUSE) << HoldemHand.HANDTYPE_SHIFT

    @staticmethod
    def __HandTypeValueFourOfAKind():
        return numpy.uint32(HoldemHand.HandTypes.FOUR_OF_A_KIND) << HoldemHand.HANDTYPE_SHIFT

    @staticmethod
    def __HandTypeValueTrips():
        return numpy.uint32(HoldemHand.HandTypes.TRIPS) << HoldemHand.HANDTYPE_SHIFT

    @staticmethod
    def __HandTypeValueTwoPair():
        return numpy.uint32(HoldemHand.HandTypes.TWO_PAIR) << HoldemHand.HANDTYPE_SHIFT
    
    @staticmethod
    def __HandTypeValuePair():
        return numpy.uint32(HoldemHand.HandTypes.PAIR) << HoldemHand.HANDTYPE_SHIFT
    

    @staticmethod
    def __HandTypeValueHighCard():
        return numpy.uint32(HoldemHand.HandTypes.HIGH_CARD) << HoldemHand.HANDTYPE_SHIFT

    @staticmethod
    def __SpadeOffset():
        return 13 * HoldemHand.SPADES
    
    @staticmethod
    def __ClubOffset():
        return 13 * HoldemHand.CLUBS
    
    @staticmethod
    def __DiamondOffset():
        return 13 * HoldemHand.DIAMONDS
    
    @staticmethod
    def __HeartOffset():
        return 13 * HoldemHand.HEARTS    

    __nBitsAndStrTable = [0x0, 0x4, 0x4, 0x8, 0x4, 0x8, 0x8, 0xc, 0x4, 0x8, 0x8, 0xc, 0x8, 0xc, 0xc, 0x10, 0x4, 0x8, 0x8, 0xc, 
            0x8, 0xc, 0xc, 0x10, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x17, 0x4, 0x8, 0x8, 0xc, 0x8, 0xc, 0xc, 0x10, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x17, 0x1b, 0x4, 0x8, 0x8, 0xc, 0x8, 0xc, 0xc, 0x10, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x8, 0xc, 0xc, 0x10, 
            0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x17, 0x1b, 0x1b, 0x1f, 0x4, 0x8, 0x8, 0xc, 0x8, 0xc, 0xc, 0x10, 0x8, 0xc, 0xc, 0x10, 
            0xc, 0x10, 0x10, 0x15, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x17, 0x1b, 0x1b, 0x1f, 0x1b, 0x1f, 0x1f, 0x23, 0x4, 0x8, 0x8, 0xc, 
            0x8, 0xc, 0xc, 0x10, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x1b, 0x1f, 0x1f, 0x23, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x17, 0x1b, 0x1b, 0x1f, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x4, 0x8, 0x8, 0xc, 0x8, 0xc, 0xc, 0x10, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x1b, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 0x8, 0xc, 0xc, 0x10, 
            0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x1b, 0x1f, 0x1f, 0x23, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x17, 0x1b, 0x1b, 0x1f, 0x1b, 0x1f, 0x1f, 0x23, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x4, 0x8, 0x8, 0xc, 0x8, 0xc, 0xc, 0x10, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x8, 0xc, 0xc, 0x10, 
            0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x1b, 0x1f, 0x1f, 0x23, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x8, 0xc, 0xc, 0x10, 
            0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x27, 0x2b, 0x17, 0x1b, 0x1b, 0x1f, 0x1b, 0x1f, 0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1b, 0x1f, 0x1f, 0x23, 
            0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 
            0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x4, 0x8, 0x8, 0xc, 0x8, 0xc, 0xc, 0x10, 0x8, 0xc, 0xc, 0x10, 
            0xc, 0x10, 0x10, 0x15, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x1b, 0x1f, 0x1f, 0x23, 0x8, 0xc, 0xc, 0x10, 
            0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x1b, 0x1f, 0x1f, 0x23, 
            0x1f, 0x23, 0x23, 0x27, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 
            0x27, 0x2b, 0x2b, 0x2f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x29, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 
            0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 0x17, 0x1b, 0x1b, 0x1f, 0x1b, 0x1f, 0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23, 
            0x1f, 0x23, 0x23, 0x27, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 
            0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 
            0x27, 0x2b, 0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 
            0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x4, 0x8, 0x8, 0xc, 
            0x8, 0xc, 0xc, 0x10, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x17, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x1b, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x1b, 0x1f, 0x1f, 0x23, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 
            0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x1b, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 
            0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 
            0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x2b, 0x2f, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 
            0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 
            0x2b, 0x2f, 0x2f, 0x33, 0x8, 0xc, 0xc, 0x10, 0xc, 0x10, 0x10, 0x15, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 
            0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0xc, 0x10, 0x10, 0x15, 
            0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x29, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 
            0x25, 0x29, 0x2b, 0x2f, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x29, 0x2f, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 
            0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0xc, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 
            0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x23, 0x27, 0x27, 0x2b, 
            0x27, 0x2b, 0x2b, 0x2f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 
            0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x2b, 0x2f, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 
            0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x29, 0x2f, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 
            0x25, 0x29, 0x29, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 
            0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 
            0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 
            0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 
            0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 
            0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 
            0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x2b, 0x2f, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 
            0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 
            0x25, 0x29, 0x29, 0x2f, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x29, 0x2f, 
            0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x29, 0x2d, 0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x17, 0x1b, 0x1b, 0x1f, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 
            0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 
            0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 
            0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 
            0x2b, 0x2f, 0x2f, 0x33, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 
            0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27, 
            0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 
            0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 
            0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 
            0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x27, 0x2b, 0x2b, 0x2f, 
            0x2b, 0x2f, 0x2f, 0x33, 0x2b, 0x2f, 0x2f, 0x33, 0x2f, 0x33, 0x33, 0x37]

    # A table representing the bit count for a 13 bit integer    
    __nBitsTable = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3,
            4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,
            4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3,
            4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
            4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3,
            4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
            4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3,
            4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3,
            4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4,
            4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3,
            4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3,
            4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,
            4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4,
            5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5,
            6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
            4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4,
            5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4,
            4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3,
            4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
            4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4,
            5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5,
            5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3,
            4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5,
            6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6,
            6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3,
            4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4,
            5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5,
            5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7,
            7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5,
            6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5,
            5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6,
            6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5,
            5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5,
            6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3,
            4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
            4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3,
            4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4,
            5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5,
            5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3,
            4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6,
            6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6,
            7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7,
            6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
            4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4,
            5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5,
            5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5,
            6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6,
            7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6,
            7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8,
            7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3,
            4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5,
            6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6,
            6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6,
            6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7,
            7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7,
            6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6,
            6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6,
            7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6,
            6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6,
            7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10,
            8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3,
            4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4,
            4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3,
            4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3,
            4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5,
            5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5,
            6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6,
            5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6,
            7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5,
            5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7,
            5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4,
            4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5,
            6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7,
            6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6,
            7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8,
            6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3,
            4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4,
            5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5,
            5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7,
            7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6,
            5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6,
            7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6,
            6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6,
            7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7,
            5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7,
            7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7,
            8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5,
            5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5,
            6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6,
            7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6,
            7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9,
            7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7,
            8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9,
            8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3,
            4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6,
            6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6,
            7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7,
            6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5,
            5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7,
            5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6,
            6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7,
            6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7,
            8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6,
            7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8,
            7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8,
            6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8,
            7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7,
            8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8,
            8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3,
            4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7,
            7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7,
            6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7,
            5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7,
            7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7,
            8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7,
            6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7,
            8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7,
            7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7,
            8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10,
            8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7,
            8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9,
            8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7,
            8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8,
            8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7,
            8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11,
            8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11,
            12, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,
            4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4,
            5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5,
            6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
            4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4,
            5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4,
            4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4,
            5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6,
            5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5,
            6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6,
            6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4,
            5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7,
            5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7,
            7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6,
            6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8,
            9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
            4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5,
            6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5,
            5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6,
            6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5,
            5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5,
            6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5,
            6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6,
            6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8,
            6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7,
            7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8,
            7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6,
            6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5,
            6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9,
            6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9,
            10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9,
            10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
            4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4,
            5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5,
            5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5,
            6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6,
            7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6,
            7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8,
            7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4,
            5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7,
            5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7,
            7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5,
            6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7,
            6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6,
            7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7,
            7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8,
            9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8,
            7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8,
            9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8,
            9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6,
            4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6,
            6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6,
            7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6,
            6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6,
            7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10,
            8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6,
            7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7,
            7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8,
            7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6,
            7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7,
            7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6,
            7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10,
            7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10,
            11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9,
            10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8,
            9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10,
            8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10,
            11, 9, 10, 10, 11, 10, 11, 11, 12, 2, 3, 3, 4, 3, 4,
            4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5,
            6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7,
            6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6,
            7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8,
            6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4,
            5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6,
            5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6,
            6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8,
            9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7,
            6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8,
            6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8,
            9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8,
            9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5,
            4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5,
            5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5,
            6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6,
            7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6,
            7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9,
            7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7,
            8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9,
            8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5,
            6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6,
            6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5,
            6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9,
            6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9,
            10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9,
            10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7,
            7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9,
            7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9,
            10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8,
            9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9,
            8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9,
            10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 3, 4,
            4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6,
            7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8,
            7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5,
            6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8,
            6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6,
            7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8,
            7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7,
            8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8,
            8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4,
            5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
            5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8,
            9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8,
            7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8,
            9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8,
            9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8,
            6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8,
            9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8,
            9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8,
            7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8,
            9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8,
            8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8,
            9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12,
            4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7,
            8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7,
            8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7,
            8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7,
            8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10,
            8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7,
            8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7,
            8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9,
            8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7,
            8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8,
            8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7,
            8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11,
            8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11,
            12, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8,
            8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8,
            9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9,
            8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9,
            10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8,
            8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8,
            9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10,
            8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10,
            11, 9, 10, 10, 11, 10, 11, 11, 12, 6, 7, 7, 8, 7, 8,
            8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8,
            9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9,
            8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9,
            10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 7, 8,
            8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8,
            9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12,
            8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11,
            12, 9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12,
            12, 13]
    
    # This method returns a straights starting card (0 if not a straight)
    __StraightTable = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc]
        
    __TopFiveCardsTable = [0x0, 0x0, 0x10000, 0x10000, 0x20000, 0x20000, 0x21000, 0x21000, 0x30000, 0x30000, 
            0x31000, 0x31000, 0x32000, 0x32000, 0x32100, 0x32100, 0x40000, 0x40000, 0x41000, 0x41000, 
            0x42000, 0x42000, 0x42100, 0x42100, 0x43000, 0x43000, 0x43100, 0x43100, 0x43200, 0x43200, 
            0x43210, 0x43210, 0x50000, 0x50000, 0x51000, 0x51000, 0x52000, 0x52000, 0x52100, 0x52100, 
            0x53000, 0x53000, 0x53100, 0x53100, 0x53200, 0x53200, 0x53210, 0x53210, 0x54000, 0x54000, 
            0x54100, 0x54100, 0x54200, 0x54200, 0x54210, 0x54210, 0x54300, 0x54300, 0x54310, 0x54310, 
            0x54320, 0x54320, 0x54321, 0x54321, 0x60000, 0x60000, 0x61000, 0x61000, 0x62000, 0x62000, 
            0x62100, 0x62100, 0x63000, 0x63000, 0x63100, 0x63100, 0x63200, 0x63200, 0x63210, 0x63210, 
            0x64000, 0x64000, 0x64100, 0x64100, 0x64200, 0x64200, 0x64210, 0x64210, 0x64300, 0x64300, 
            0x64310, 0x64310, 0x64320, 0x64320, 0x64321, 0x64321, 0x65000, 0x65000, 0x65100, 0x65100, 
            0x65200, 0x65200, 0x65210, 0x65210, 0x65300, 0x65300, 0x65310, 0x65310, 0x65320, 0x65320, 
            0x65321, 0x65321, 0x65400, 0x65400, 0x65410, 0x65410, 0x65420, 0x65420, 0x65421, 0x65421, 
            0x65430, 0x65430, 0x65431, 0x65431, 0x65432, 0x65432, 0x65432, 0x65432, 0x70000, 0x70000, 
            0x71000, 0x71000, 0x72000, 0x72000, 0x72100, 0x72100, 0x73000, 0x73000, 0x73100, 0x73100, 
            0x73200, 0x73200, 0x73210, 0x73210, 0x74000, 0x74000, 0x74100, 0x74100, 0x74200, 0x74200, 
            0x74210, 0x74210, 0x74300, 0x74300, 0x74310, 0x74310, 0x74320, 0x74320, 0x74321, 0x74321, 
            0x75000, 0x75000, 0x75100, 0x75100, 0x75200, 0x75200, 0x75210, 0x75210, 0x75300, 0x75300, 
            0x75310, 0x75310, 0x75320, 0x75320, 0x75321, 0x75321, 0x75400, 0x75400, 0x75410, 0x75410, 
            0x75420, 0x75420, 0x75421, 0x75421, 0x75430, 0x75430, 0x75431, 0x75431, 0x75432, 0x75432, 
            0x75432, 0x75432, 0x76000, 0x76000, 0x76100, 0x76100, 0x76200, 0x76200, 0x76210, 0x76210, 
            0x76300, 0x76300, 0x76310, 0x76310, 0x76320, 0x76320, 0x76321, 0x76321, 0x76400, 0x76400, 
            0x76410, 0x76410, 0x76420, 0x76420, 0x76421, 0x76421, 0x76430, 0x76430, 0x76431, 0x76431, 
            0x76432, 0x76432, 0x76432, 0x76432, 0x76500, 0x76500, 0x76510, 0x76510, 0x76520, 0x76520, 
            0x76521, 0x76521, 0x76530, 0x76530, 0x76531, 0x76531, 0x76532, 0x76532, 0x76532, 0x76532, 
            0x76540, 0x76540, 0x76541, 0x76541, 0x76542, 0x76542, 0x76542, 0x76542, 0x76543, 0x76543, 
            0x76543, 0x76543, 0x76543, 0x76543, 0x76543, 0x76543, 0x80000, 0x80000, 0x81000, 0x81000, 
            0x82000, 0x82000, 0x82100, 0x82100, 0x83000, 0x83000, 0x83100, 0x83100, 0x83200, 0x83200, 
            0x83210, 0x83210, 0x84000, 0x84000, 0x84100, 0x84100, 0x84200, 0x84200, 0x84210, 0x84210, 
            0x84300, 0x84300, 0x84310, 0x84310, 0x84320, 0x84320, 0x84321, 0x84321, 0x85000, 0x85000, 
            0x85100, 0x85100, 0x85200, 0x85200, 0x85210, 0x85210, 0x85300, 0x85300, 0x85310, 0x85310, 
            0x85320, 0x85320, 0x85321, 0x85321, 0x85400, 0x85400, 0x85410, 0x85410, 0x85420, 0x85420, 
            0x85421, 0x85421, 0x85430, 0x85430, 0x85431, 0x85431, 0x85432, 0x85432, 0x85432, 0x85432, 
            0x86000, 0x86000, 0x86100, 0x86100, 0x86200, 0x86200, 0x86210, 0x86210, 0x86300, 0x86300, 
            0x86310, 0x86310, 0x86320, 0x86320, 0x86321, 0x86321, 0x86400, 0x86400, 0x86410, 0x86410, 
            0x86420, 0x86420, 0x86421, 0x86421, 0x86430, 0x86430, 0x86431, 0x86431, 0x86432, 0x86432, 
            0x86432, 0x86432, 0x86500, 0x86500, 0x86510, 0x86510, 0x86520, 0x86520, 0x86521, 0x86521, 
            0x86530, 0x86530, 0x86531, 0x86531, 0x86532, 0x86532, 0x86532, 0x86532, 0x86540, 0x86540, 
            0x86541, 0x86541, 0x86542, 0x86542, 0x86542, 0x86542, 0x86543, 0x86543, 0x86543, 0x86543, 
            0x86543, 0x86543, 0x86543, 0x86543, 0x87000, 0x87000, 0x87100, 0x87100, 0x87200, 0x87200, 
            0x87210, 0x87210, 0x87300, 0x87300, 0x87310, 0x87310, 0x87320, 0x87320, 0x87321, 0x87321, 
            0x87400, 0x87400, 0x87410, 0x87410, 0x87420, 0x87420, 0x87421, 0x87421, 0x87430, 0x87430, 
            0x87431, 0x87431, 0x87432, 0x87432, 0x87432, 0x87432, 0x87500, 0x87500, 0x87510, 0x87510, 
            0x87520, 0x87520, 0x87521, 0x87521, 0x87530, 0x87530, 0x87531, 0x87531, 0x87532, 0x87532, 
            0x87532, 0x87532, 0x87540, 0x87540, 0x87541, 0x87541, 0x87542, 0x87542, 0x87542, 0x87542, 
            0x87543, 0x87543, 0x87543, 0x87543, 0x87543, 0x87543, 0x87543, 0x87543, 0x87600, 0x87600, 
            0x87610, 0x87610, 0x87620, 0x87620, 0x87621, 0x87621, 0x87630, 0x87630, 0x87631, 0x87631, 
            0x87632, 0x87632, 0x87632, 0x87632, 0x87640, 0x87640, 0x87641, 0x87641, 0x87642, 0x87642, 
            0x87642, 0x87642, 0x87643, 0x87643, 0x87643, 0x87643, 0x87643, 0x87643, 0x87643, 0x87643, 
            0x87650, 0x87650, 0x87651, 0x87651, 0x87652, 0x87652, 0x87652, 0x87652, 0x87653, 0x87653, 
            0x87653, 0x87653, 0x87653, 0x87653, 0x87653, 0x87653, 0x87654, 0x87654, 0x87654, 0x87654, 
            0x87654, 0x87654, 0x87654, 0x87654, 0x87654, 0x87654, 0x87654, 0x87654, 0x87654, 0x87654, 
            0x87654, 0x87654, 0x90000, 0x90000, 0x91000, 0x91000, 0x92000, 0x92000, 0x92100, 0x92100, 
            0x93000, 0x93000, 0x93100, 0x93100, 0x93200, 0x93200, 0x93210, 0x93210, 0x94000, 0x94000, 
            0x94100, 0x94100, 0x94200, 0x94200, 0x94210, 0x94210, 0x94300, 0x94300, 0x94310, 0x94310, 
            0x94320, 0x94320, 0x94321, 0x94321, 0x95000, 0x95000, 0x95100, 0x95100, 0x95200, 0x95200, 
            0x95210, 0x95210, 0x95300, 0x95300, 0x95310, 0x95310, 0x95320, 0x95320, 0x95321, 0x95321, 
            0x95400, 0x95400, 0x95410, 0x95410, 0x95420, 0x95420, 0x95421, 0x95421, 0x95430, 0x95430, 
            0x95431, 0x95431, 0x95432, 0x95432, 0x95432, 0x95432, 0x96000, 0x96000, 0x96100, 0x96100, 
            0x96200, 0x96200, 0x96210, 0x96210, 0x96300, 0x96300, 0x96310, 0x96310, 0x96320, 0x96320, 
            0x96321, 0x96321, 0x96400, 0x96400, 0x96410, 0x96410, 0x96420, 0x96420, 0x96421, 0x96421, 
            0x96430, 0x96430, 0x96431, 0x96431, 0x96432, 0x96432, 0x96432, 0x96432, 0x96500, 0x96500, 
            0x96510, 0x96510, 0x96520, 0x96520, 0x96521, 0x96521, 0x96530, 0x96530, 0x96531, 0x96531, 
            0x96532, 0x96532, 0x96532, 0x96532, 0x96540, 0x96540, 0x96541, 0x96541, 0x96542, 0x96542, 
            0x96542, 0x96542, 0x96543, 0x96543, 0x96543, 0x96543, 0x96543, 0x96543, 0x96543, 0x96543, 
            0x97000, 0x97000, 0x97100, 0x97100, 0x97200, 0x97200, 0x97210, 0x97210, 0x97300, 0x97300, 
            0x97310, 0x97310, 0x97320, 0x97320, 0x97321, 0x97321, 0x97400, 0x97400, 0x97410, 0x97410, 
            0x97420, 0x97420, 0x97421, 0x97421, 0x97430, 0x97430, 0x97431, 0x97431, 0x97432, 0x97432, 
            0x97432, 0x97432, 0x97500, 0x97500, 0x97510, 0x97510, 0x97520, 0x97520, 0x97521, 0x97521, 
            0x97530, 0x97530, 0x97531, 0x97531, 0x97532, 0x97532, 0x97532, 0x97532, 0x97540, 0x97540, 
            0x97541, 0x97541, 0x97542, 0x97542, 0x97542, 0x97542, 0x97543, 0x97543, 0x97543, 0x97543, 
            0x97543, 0x97543, 0x97543, 0x97543, 0x97600, 0x97600, 0x97610, 0x97610, 0x97620, 0x97620, 
            0x97621, 0x97621, 0x97630, 0x97630, 0x97631, 0x97631, 0x97632, 0x97632, 0x97632, 0x97632, 
            0x97640, 0x97640, 0x97641, 0x97641, 0x97642, 0x97642, 0x97642, 0x97642, 0x97643, 0x97643, 
            0x97643, 0x97643, 0x97643, 0x97643, 0x97643, 0x97643, 0x97650, 0x97650, 0x97651, 0x97651, 
            0x97652, 0x97652, 0x97652, 0x97652, 0x97653, 0x97653, 0x97653, 0x97653, 0x97653, 0x97653, 
            0x97653, 0x97653, 0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 
            0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 0x97654, 0x98000, 0x98000, 
            0x98100, 0x98100, 0x98200, 0x98200, 0x98210, 0x98210, 0x98300, 0x98300, 0x98310, 0x98310, 
            0x98320, 0x98320, 0x98321, 0x98321, 0x98400, 0x98400, 0x98410, 0x98410, 0x98420, 0x98420, 
            0x98421, 0x98421, 0x98430, 0x98430, 0x98431, 0x98431, 0x98432, 0x98432, 0x98432, 0x98432, 
            0x98500, 0x98500, 0x98510, 0x98510, 0x98520, 0x98520, 0x98521, 0x98521, 0x98530, 0x98530, 
            0x98531, 0x98531, 0x98532, 0x98532, 0x98532, 0x98532, 0x98540, 0x98540, 0x98541, 0x98541, 
            0x98542, 0x98542, 0x98542, 0x98542, 0x98543, 0x98543, 0x98543, 0x98543, 0x98543, 0x98543, 
            0x98543, 0x98543, 0x98600, 0x98600, 0x98610, 0x98610, 0x98620, 0x98620, 0x98621, 0x98621, 
            0x98630, 0x98630, 0x98631, 0x98631, 0x98632, 0x98632, 0x98632, 0x98632, 0x98640, 0x98640, 
            0x98641, 0x98641, 0x98642, 0x98642, 0x98642, 0x98642, 0x98643, 0x98643, 0x98643, 0x98643, 
            0x98643, 0x98643, 0x98643, 0x98643, 0x98650, 0x98650, 0x98651, 0x98651, 0x98652, 0x98652, 
            0x98652, 0x98652, 0x98653, 0x98653, 0x98653, 0x98653, 0x98653, 0x98653, 0x98653, 0x98653, 
            0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 
            0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 0x98654, 0x98700, 0x98700, 0x98710, 0x98710, 
            0x98720, 0x98720, 0x98721, 0x98721, 0x98730, 0x98730, 0x98731, 0x98731, 0x98732, 0x98732, 
            0x98732, 0x98732, 0x98740, 0x98740, 0x98741, 0x98741, 0x98742, 0x98742, 0x98742, 0x98742, 
            0x98743, 0x98743, 0x98743, 0x98743, 0x98743, 0x98743, 0x98743, 0x98743, 0x98750, 0x98750, 
            0x98751, 0x98751, 0x98752, 0x98752, 0x98752, 0x98752, 0x98753, 0x98753, 0x98753, 0x98753, 
            0x98753, 0x98753, 0x98753, 0x98753, 0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 
            0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 0x98754, 
            0x98760, 0x98760, 0x98761, 0x98761, 0x98762, 0x98762, 0x98762, 0x98762, 0x98763, 0x98763, 
            0x98763, 0x98763, 0x98763, 0x98763, 0x98763, 0x98763, 0x98764, 0x98764, 0x98764, 0x98764, 
            0x98764, 0x98764, 0x98764, 0x98764, 0x98764, 0x98764, 0x98764, 0x98764, 0x98764, 0x98764, 
            0x98764, 0x98764, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 
            0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 
            0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 0x98765, 
            0x98765, 0x98765, 0x98765, 0x98765, 0xa0000, 0xa0000, 0xa1000, 0xa1000, 0xa2000, 0xa2000, 
            0xa2100, 0xa2100, 0xa3000, 0xa3000, 0xa3100, 0xa3100, 0xa3200, 0xa3200, 0xa3210, 0xa3210, 
            0xa4000, 0xa4000, 0xa4100, 0xa4100, 0xa4200, 0xa4200, 0xa4210, 0xa4210, 0xa4300, 0xa4300, 
            0xa4310, 0xa4310, 0xa4320, 0xa4320, 0xa4321, 0xa4321, 0xa5000, 0xa5000, 0xa5100, 0xa5100, 
            0xa5200, 0xa5200, 0xa5210, 0xa5210, 0xa5300, 0xa5300, 0xa5310, 0xa5310, 0xa5320, 0xa5320, 
            0xa5321, 0xa5321, 0xa5400, 0xa5400, 0xa5410, 0xa5410, 0xa5420, 0xa5420, 0xa5421, 0xa5421, 
            0xa5430, 0xa5430, 0xa5431, 0xa5431, 0xa5432, 0xa5432, 0xa5432, 0xa5432, 0xa6000, 0xa6000, 
            0xa6100, 0xa6100, 0xa6200, 0xa6200, 0xa6210, 0xa6210, 0xa6300, 0xa6300, 0xa6310, 0xa6310, 
            0xa6320, 0xa6320, 0xa6321, 0xa6321, 0xa6400, 0xa6400, 0xa6410, 0xa6410, 0xa6420, 0xa6420, 
            0xa6421, 0xa6421, 0xa6430, 0xa6430, 0xa6431, 0xa6431, 0xa6432, 0xa6432, 0xa6432, 0xa6432, 
            0xa6500, 0xa6500, 0xa6510, 0xa6510, 0xa6520, 0xa6520, 0xa6521, 0xa6521, 0xa6530, 0xa6530, 
            0xa6531, 0xa6531, 0xa6532, 0xa6532, 0xa6532, 0xa6532, 0xa6540, 0xa6540, 0xa6541, 0xa6541, 
            0xa6542, 0xa6542, 0xa6542, 0xa6542, 0xa6543, 0xa6543, 0xa6543, 0xa6543, 0xa6543, 0xa6543, 
            0xa6543, 0xa6543, 0xa7000, 0xa7000, 0xa7100, 0xa7100, 0xa7200, 0xa7200, 0xa7210, 0xa7210, 
            0xa7300, 0xa7300, 0xa7310, 0xa7310, 0xa7320, 0xa7320, 0xa7321, 0xa7321, 0xa7400, 0xa7400, 
            0xa7410, 0xa7410, 0xa7420, 0xa7420, 0xa7421, 0xa7421, 0xa7430, 0xa7430, 0xa7431, 0xa7431, 
            0xa7432, 0xa7432, 0xa7432, 0xa7432, 0xa7500, 0xa7500, 0xa7510, 0xa7510, 0xa7520, 0xa7520, 
            0xa7521, 0xa7521, 0xa7530, 0xa7530, 0xa7531, 0xa7531, 0xa7532, 0xa7532, 0xa7532, 0xa7532, 
            0xa7540, 0xa7540, 0xa7541, 0xa7541, 0xa7542, 0xa7542, 0xa7542, 0xa7542, 0xa7543, 0xa7543, 
            0xa7543, 0xa7543, 0xa7543, 0xa7543, 0xa7543, 0xa7543, 0xa7600, 0xa7600, 0xa7610, 0xa7610, 
            0xa7620, 0xa7620, 0xa7621, 0xa7621, 0xa7630, 0xa7630, 0xa7631, 0xa7631, 0xa7632, 0xa7632, 
            0xa7632, 0xa7632, 0xa7640, 0xa7640, 0xa7641, 0xa7641, 0xa7642, 0xa7642, 0xa7642, 0xa7642, 
            0xa7643, 0xa7643, 0xa7643, 0xa7643, 0xa7643, 0xa7643, 0xa7643, 0xa7643, 0xa7650, 0xa7650, 
            0xa7651, 0xa7651, 0xa7652, 0xa7652, 0xa7652, 0xa7652, 0xa7653, 0xa7653, 0xa7653, 0xa7653, 
            0xa7653, 0xa7653, 0xa7653, 0xa7653, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 
            0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 0xa7654, 
            0xa8000, 0xa8000, 0xa8100, 0xa8100, 0xa8200, 0xa8200, 0xa8210, 0xa8210, 0xa8300, 0xa8300, 
            0xa8310, 0xa8310, 0xa8320, 0xa8320, 0xa8321, 0xa8321, 0xa8400, 0xa8400, 0xa8410, 0xa8410, 
            0xa8420, 0xa8420, 0xa8421, 0xa8421, 0xa8430, 0xa8430, 0xa8431, 0xa8431, 0xa8432, 0xa8432, 
            0xa8432, 0xa8432, 0xa8500, 0xa8500, 0xa8510, 0xa8510, 0xa8520, 0xa8520, 0xa8521, 0xa8521, 
            0xa8530, 0xa8530, 0xa8531, 0xa8531, 0xa8532, 0xa8532, 0xa8532, 0xa8532, 0xa8540, 0xa8540, 
            0xa8541, 0xa8541, 0xa8542, 0xa8542, 0xa8542, 0xa8542, 0xa8543, 0xa8543, 0xa8543, 0xa8543, 
            0xa8543, 0xa8543, 0xa8543, 0xa8543, 0xa8600, 0xa8600, 0xa8610, 0xa8610, 0xa8620, 0xa8620, 
            0xa8621, 0xa8621, 0xa8630, 0xa8630, 0xa8631, 0xa8631, 0xa8632, 0xa8632, 0xa8632, 0xa8632, 
            0xa8640, 0xa8640, 0xa8641, 0xa8641, 0xa8642, 0xa8642, 0xa8642, 0xa8642, 0xa8643, 0xa8643, 
            0xa8643, 0xa8643, 0xa8643, 0xa8643, 0xa8643, 0xa8643, 0xa8650, 0xa8650, 0xa8651, 0xa8651, 
            0xa8652, 0xa8652, 0xa8652, 0xa8652, 0xa8653, 0xa8653, 0xa8653, 0xa8653, 0xa8653, 0xa8653, 
            0xa8653, 0xa8653, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 
            0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8654, 0xa8700, 0xa8700, 
            0xa8710, 0xa8710, 0xa8720, 0xa8720, 0xa8721, 0xa8721, 0xa8730, 0xa8730, 0xa8731, 0xa8731, 
            0xa8732, 0xa8732, 0xa8732, 0xa8732, 0xa8740, 0xa8740, 0xa8741, 0xa8741, 0xa8742, 0xa8742, 
            0xa8742, 0xa8742, 0xa8743, 0xa8743, 0xa8743, 0xa8743, 0xa8743, 0xa8743, 0xa8743, 0xa8743, 
            0xa8750, 0xa8750, 0xa8751, 0xa8751, 0xa8752, 0xa8752, 0xa8752, 0xa8752, 0xa8753, 0xa8753, 
            0xa8753, 0xa8753, 0xa8753, 0xa8753, 0xa8753, 0xa8753, 0xa8754, 0xa8754, 0xa8754, 0xa8754, 
            0xa8754, 0xa8754, 0xa8754, 0xa8754, 0xa8754, 0xa8754, 0xa8754, 0xa8754, 0xa8754, 0xa8754, 
            0xa8754, 0xa8754, 0xa8760, 0xa8760, 0xa8761, 0xa8761, 0xa8762, 0xa8762, 0xa8762, 0xa8762, 
            0xa8763, 0xa8763, 0xa8763, 0xa8763, 0xa8763, 0xa8763, 0xa8763, 0xa8763, 0xa8764, 0xa8764, 
            0xa8764, 0xa8764, 0xa8764, 0xa8764, 0xa8764, 0xa8764, 0xa8764, 0xa8764, 0xa8764, 0xa8764, 
            0xa8764, 0xa8764, 0xa8764, 0xa8764, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 
            0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 
            0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 
            0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa8765, 0xa9000, 0xa9000, 0xa9100, 0xa9100, 
            0xa9200, 0xa9200, 0xa9210, 0xa9210, 0xa9300, 0xa9300, 0xa9310, 0xa9310, 0xa9320, 0xa9320, 
            0xa9321, 0xa9321, 0xa9400, 0xa9400, 0xa9410, 0xa9410, 0xa9420, 0xa9420, 0xa9421, 0xa9421, 
            0xa9430, 0xa9430, 0xa9431, 0xa9431, 0xa9432, 0xa9432, 0xa9432, 0xa9432, 0xa9500, 0xa9500, 
            0xa9510, 0xa9510, 0xa9520, 0xa9520, 0xa9521, 0xa9521, 0xa9530, 0xa9530, 0xa9531, 0xa9531, 
            0xa9532, 0xa9532, 0xa9532, 0xa9532, 0xa9540, 0xa9540, 0xa9541, 0xa9541, 0xa9542, 0xa9542, 
            0xa9542, 0xa9542, 0xa9543, 0xa9543, 0xa9543, 0xa9543, 0xa9543, 0xa9543, 0xa9543, 0xa9543, 
            0xa9600, 0xa9600, 0xa9610, 0xa9610, 0xa9620, 0xa9620, 0xa9621, 0xa9621, 0xa9630, 0xa9630, 
            0xa9631, 0xa9631, 0xa9632, 0xa9632, 0xa9632, 0xa9632, 0xa9640, 0xa9640, 0xa9641, 0xa9641, 
            0xa9642, 0xa9642, 0xa9642, 0xa9642, 0xa9643, 0xa9643, 0xa9643, 0xa9643, 0xa9643, 0xa9643, 
            0xa9643, 0xa9643, 0xa9650, 0xa9650, 0xa9651, 0xa9651, 0xa9652, 0xa9652, 0xa9652, 0xa9652, 
            0xa9653, 0xa9653, 0xa9653, 0xa9653, 0xa9653, 0xa9653, 0xa9653, 0xa9653, 0xa9654, 0xa9654, 
            0xa9654, 0xa9654, 0xa9654, 0xa9654, 0xa9654, 0xa9654, 0xa9654, 0xa9654, 0xa9654, 0xa9654, 
            0xa9654, 0xa9654, 0xa9654, 0xa9654, 0xa9700, 0xa9700, 0xa9710, 0xa9710, 0xa9720, 0xa9720, 
            0xa9721, 0xa9721, 0xa9730, 0xa9730, 0xa9731, 0xa9731, 0xa9732, 0xa9732, 0xa9732, 0xa9732, 
            0xa9740, 0xa9740, 0xa9741, 0xa9741, 0xa9742, 0xa9742, 0xa9742, 0xa9742, 0xa9743, 0xa9743, 
            0xa9743, 0xa9743, 0xa9743, 0xa9743, 0xa9743, 0xa9743, 0xa9750, 0xa9750, 0xa9751, 0xa9751, 
            0xa9752, 0xa9752, 0xa9752, 0xa9752, 0xa9753, 0xa9753, 0xa9753, 0xa9753, 0xa9753, 0xa9753, 
            0xa9753, 0xa9753, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 
            0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9754, 0xa9760, 0xa9760, 
            0xa9761, 0xa9761, 0xa9762, 0xa9762, 0xa9762, 0xa9762, 0xa9763, 0xa9763, 0xa9763, 0xa9763, 
            0xa9763, 0xa9763, 0xa9763, 0xa9763, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 
            0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 0xa9764, 
            0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 
            0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 
            0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 0xa9765, 
            0xa9765, 0xa9765, 0xa9800, 0xa9800, 0xa9810, 0xa9810, 0xa9820, 0xa9820, 0xa9821, 0xa9821, 
            0xa9830, 0xa9830, 0xa9831, 0xa9831, 0xa9832, 0xa9832, 0xa9832, 0xa9832, 0xa9840, 0xa9840, 
            0xa9841, 0xa9841, 0xa9842, 0xa9842, 0xa9842, 0xa9842, 0xa9843, 0xa9843, 0xa9843, 0xa9843, 
            0xa9843, 0xa9843, 0xa9843, 0xa9843, 0xa9850, 0xa9850, 0xa9851, 0xa9851, 0xa9852, 0xa9852, 
            0xa9852, 0xa9852, 0xa9853, 0xa9853, 0xa9853, 0xa9853, 0xa9853, 0xa9853, 0xa9853, 0xa9853, 
            0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 
            0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9854, 0xa9860, 0xa9860, 0xa9861, 0xa9861, 
            0xa9862, 0xa9862, 0xa9862, 0xa9862, 0xa9863, 0xa9863, 0xa9863, 0xa9863, 0xa9863, 0xa9863, 
            0xa9863, 0xa9863, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 
            0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9864, 0xa9865, 0xa9865, 
            0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 
            0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 
            0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 0xa9865, 
            0xa9870, 0xa9870, 0xa9871, 0xa9871, 0xa9872, 0xa9872, 0xa9872, 0xa9872, 0xa9873, 0xa9873, 
            0xa9873, 0xa9873, 0xa9873, 0xa9873, 0xa9873, 0xa9873, 0xa9874, 0xa9874, 0xa9874, 0xa9874, 
            0xa9874, 0xa9874, 0xa9874, 0xa9874, 0xa9874, 0xa9874, 0xa9874, 0xa9874, 0xa9874, 0xa9874, 
            0xa9874, 0xa9874, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 
            0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 
            0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9875, 
            0xa9875, 0xa9875, 0xa9875, 0xa9875, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 
            0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 
            0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 
            0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 
            0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 
            0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 
            0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xa9876, 0xb0000, 0xb0000, 
            0xb1000, 0xb1000, 0xb2000, 0xb2000, 0xb2100, 0xb2100, 0xb3000, 0xb3000, 0xb3100, 0xb3100, 
            0xb3200, 0xb3200, 0xb3210, 0xb3210, 0xb4000, 0xb4000, 0xb4100, 0xb4100, 0xb4200, 0xb4200, 
            0xb4210, 0xb4210, 0xb4300, 0xb4300, 0xb4310, 0xb4310, 0xb4320, 0xb4320, 0xb4321, 0xb4321, 
            0xb5000, 0xb5000, 0xb5100, 0xb5100, 0xb5200, 0xb5200, 0xb5210, 0xb5210, 0xb5300, 0xb5300, 
            0xb5310, 0xb5310, 0xb5320, 0xb5320, 0xb5321, 0xb5321, 0xb5400, 0xb5400, 0xb5410, 0xb5410, 
            0xb5420, 0xb5420, 0xb5421, 0xb5421, 0xb5430, 0xb5430, 0xb5431, 0xb5431, 0xb5432, 0xb5432, 
            0xb5432, 0xb5432, 0xb6000, 0xb6000, 0xb6100, 0xb6100, 0xb6200, 0xb6200, 0xb6210, 0xb6210, 
            0xb6300, 0xb6300, 0xb6310, 0xb6310, 0xb6320, 0xb6320, 0xb6321, 0xb6321, 0xb6400, 0xb6400, 
            0xb6410, 0xb6410, 0xb6420, 0xb6420, 0xb6421, 0xb6421, 0xb6430, 0xb6430, 0xb6431, 0xb6431, 
            0xb6432, 0xb6432, 0xb6432, 0xb6432, 0xb6500, 0xb6500, 0xb6510, 0xb6510, 0xb6520, 0xb6520, 
            0xb6521, 0xb6521, 0xb6530, 0xb6530, 0xb6531, 0xb6531, 0xb6532, 0xb6532, 0xb6532, 0xb6532, 
            0xb6540, 0xb6540, 0xb6541, 0xb6541, 0xb6542, 0xb6542, 0xb6542, 0xb6542, 0xb6543, 0xb6543, 
            0xb6543, 0xb6543, 0xb6543, 0xb6543, 0xb6543, 0xb6543, 0xb7000, 0xb7000, 0xb7100, 0xb7100, 
            0xb7200, 0xb7200, 0xb7210, 0xb7210, 0xb7300, 0xb7300, 0xb7310, 0xb7310, 0xb7320, 0xb7320, 
            0xb7321, 0xb7321, 0xb7400, 0xb7400, 0xb7410, 0xb7410, 0xb7420, 0xb7420, 0xb7421, 0xb7421, 
            0xb7430, 0xb7430, 0xb7431, 0xb7431, 0xb7432, 0xb7432, 0xb7432, 0xb7432, 0xb7500, 0xb7500, 
            0xb7510, 0xb7510, 0xb7520, 0xb7520, 0xb7521, 0xb7521, 0xb7530, 0xb7530, 0xb7531, 0xb7531, 
            0xb7532, 0xb7532, 0xb7532, 0xb7532, 0xb7540, 0xb7540, 0xb7541, 0xb7541, 0xb7542, 0xb7542, 
            0xb7542, 0xb7542, 0xb7543, 0xb7543, 0xb7543, 0xb7543, 0xb7543, 0xb7543, 0xb7543, 0xb7543, 
            0xb7600, 0xb7600, 0xb7610, 0xb7610, 0xb7620, 0xb7620, 0xb7621, 0xb7621, 0xb7630, 0xb7630, 
            0xb7631, 0xb7631, 0xb7632, 0xb7632, 0xb7632, 0xb7632, 0xb7640, 0xb7640, 0xb7641, 0xb7641, 
            0xb7642, 0xb7642, 0xb7642, 0xb7642, 0xb7643, 0xb7643, 0xb7643, 0xb7643, 0xb7643, 0xb7643, 
            0xb7643, 0xb7643, 0xb7650, 0xb7650, 0xb7651, 0xb7651, 0xb7652, 0xb7652, 0xb7652, 0xb7652, 
            0xb7653, 0xb7653, 0xb7653, 0xb7653, 0xb7653, 0xb7653, 0xb7653, 0xb7653, 0xb7654, 0xb7654, 
            0xb7654, 0xb7654, 0xb7654, 0xb7654, 0xb7654, 0xb7654, 0xb7654, 0xb7654, 0xb7654, 0xb7654, 
            0xb7654, 0xb7654, 0xb7654, 0xb7654, 0xb8000, 0xb8000, 0xb8100, 0xb8100, 0xb8200, 0xb8200, 
            0xb8210, 0xb8210, 0xb8300, 0xb8300, 0xb8310, 0xb8310, 0xb8320, 0xb8320, 0xb8321, 0xb8321, 
            0xb8400, 0xb8400, 0xb8410, 0xb8410, 0xb8420, 0xb8420, 0xb8421, 0xb8421, 0xb8430, 0xb8430, 
            0xb8431, 0xb8431, 0xb8432, 0xb8432, 0xb8432, 0xb8432, 0xb8500, 0xb8500, 0xb8510, 0xb8510, 
            0xb8520, 0xb8520, 0xb8521, 0xb8521, 0xb8530, 0xb8530, 0xb8531, 0xb8531, 0xb8532, 0xb8532, 
            0xb8532, 0xb8532, 0xb8540, 0xb8540, 0xb8541, 0xb8541, 0xb8542, 0xb8542, 0xb8542, 0xb8542, 
            0xb8543, 0xb8543, 0xb8543, 0xb8543, 0xb8543, 0xb8543, 0xb8543, 0xb8543, 0xb8600, 0xb8600, 
            0xb8610, 0xb8610, 0xb8620, 0xb8620, 0xb8621, 0xb8621, 0xb8630, 0xb8630, 0xb8631, 0xb8631, 
            0xb8632, 0xb8632, 0xb8632, 0xb8632, 0xb8640, 0xb8640, 0xb8641, 0xb8641, 0xb8642, 0xb8642, 
            0xb8642, 0xb8642, 0xb8643, 0xb8643, 0xb8643, 0xb8643, 0xb8643, 0xb8643, 0xb8643, 0xb8643, 
            0xb8650, 0xb8650, 0xb8651, 0xb8651, 0xb8652, 0xb8652, 0xb8652, 0xb8652, 0xb8653, 0xb8653, 
            0xb8653, 0xb8653, 0xb8653, 0xb8653, 0xb8653, 0xb8653, 0xb8654, 0xb8654, 0xb8654, 0xb8654, 
            0xb8654, 0xb8654, 0xb8654, 0xb8654, 0xb8654, 0xb8654, 0xb8654, 0xb8654, 0xb8654, 0xb8654, 
            0xb8654, 0xb8654, 0xb8700, 0xb8700, 0xb8710, 0xb8710, 0xb8720, 0xb8720, 0xb8721, 0xb8721, 
            0xb8730, 0xb8730, 0xb8731, 0xb8731, 0xb8732, 0xb8732, 0xb8732, 0xb8732, 0xb8740, 0xb8740, 
            0xb8741, 0xb8741, 0xb8742, 0xb8742, 0xb8742, 0xb8742, 0xb8743, 0xb8743, 0xb8743, 0xb8743, 
            0xb8743, 0xb8743, 0xb8743, 0xb8743, 0xb8750, 0xb8750, 0xb8751, 0xb8751, 0xb8752, 0xb8752, 
            0xb8752, 0xb8752, 0xb8753, 0xb8753, 0xb8753, 0xb8753, 0xb8753, 0xb8753, 0xb8753, 0xb8753, 
            0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 
            0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8754, 0xb8760, 0xb8760, 0xb8761, 0xb8761, 
            0xb8762, 0xb8762, 0xb8762, 0xb8762, 0xb8763, 0xb8763, 0xb8763, 0xb8763, 0xb8763, 0xb8763, 
            0xb8763, 0xb8763, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 
            0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8764, 0xb8765, 0xb8765, 
            0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 
            0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 
            0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 0xb8765, 
            0xb9000, 0xb9000, 0xb9100, 0xb9100, 0xb9200, 0xb9200, 0xb9210, 0xb9210, 0xb9300, 0xb9300, 
            0xb9310, 0xb9310, 0xb9320, 0xb9320, 0xb9321, 0xb9321, 0xb9400, 0xb9400, 0xb9410, 0xb9410, 
            0xb9420, 0xb9420, 0xb9421, 0xb9421, 0xb9430, 0xb9430, 0xb9431, 0xb9431, 0xb9432, 0xb9432, 
            0xb9432, 0xb9432, 0xb9500, 0xb9500, 0xb9510, 0xb9510, 0xb9520, 0xb9520, 0xb9521, 0xb9521, 
            0xb9530, 0xb9530, 0xb9531, 0xb9531, 0xb9532, 0xb9532, 0xb9532, 0xb9532, 0xb9540, 0xb9540, 
            0xb9541, 0xb9541, 0xb9542, 0xb9542, 0xb9542, 0xb9542, 0xb9543, 0xb9543, 0xb9543, 0xb9543, 
            0xb9543, 0xb9543, 0xb9543, 0xb9543, 0xb9600, 0xb9600, 0xb9610, 0xb9610, 0xb9620, 0xb9620, 
            0xb9621, 0xb9621, 0xb9630, 0xb9630, 0xb9631, 0xb9631, 0xb9632, 0xb9632, 0xb9632, 0xb9632, 
            0xb9640, 0xb9640, 0xb9641, 0xb9641, 0xb9642, 0xb9642, 0xb9642, 0xb9642, 0xb9643, 0xb9643, 
            0xb9643, 0xb9643, 0xb9643, 0xb9643, 0xb9643, 0xb9643, 0xb9650, 0xb9650, 0xb9651, 0xb9651, 
            0xb9652, 0xb9652, 0xb9652, 0xb9652, 0xb9653, 0xb9653, 0xb9653, 0xb9653, 0xb9653, 0xb9653, 
            0xb9653, 0xb9653, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 
            0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9654, 0xb9700, 0xb9700, 
            0xb9710, 0xb9710, 0xb9720, 0xb9720, 0xb9721, 0xb9721, 0xb9730, 0xb9730, 0xb9731, 0xb9731, 
            0xb9732, 0xb9732, 0xb9732, 0xb9732, 0xb9740, 0xb9740, 0xb9741, 0xb9741, 0xb9742, 0xb9742, 
            0xb9742, 0xb9742, 0xb9743, 0xb9743, 0xb9743, 0xb9743, 0xb9743, 0xb9743, 0xb9743, 0xb9743, 
            0xb9750, 0xb9750, 0xb9751, 0xb9751, 0xb9752, 0xb9752, 0xb9752, 0xb9752, 0xb9753, 0xb9753, 
            0xb9753, 0xb9753, 0xb9753, 0xb9753, 0xb9753, 0xb9753, 0xb9754, 0xb9754, 0xb9754, 0xb9754, 
            0xb9754, 0xb9754, 0xb9754, 0xb9754, 0xb9754, 0xb9754, 0xb9754, 0xb9754, 0xb9754, 0xb9754, 
            0xb9754, 0xb9754, 0xb9760, 0xb9760, 0xb9761, 0xb9761, 0xb9762, 0xb9762, 0xb9762, 0xb9762, 
            0xb9763, 0xb9763, 0xb9763, 0xb9763, 0xb9763, 0xb9763, 0xb9763, 0xb9763, 0xb9764, 0xb9764, 
            0xb9764, 0xb9764, 0xb9764, 0xb9764, 0xb9764, 0xb9764, 0xb9764, 0xb9764, 0xb9764, 0xb9764, 
            0xb9764, 0xb9764, 0xb9764, 0xb9764, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 
            0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 
            0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 
            0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9765, 0xb9800, 0xb9800, 0xb9810, 0xb9810, 
            0xb9820, 0xb9820, 0xb9821, 0xb9821, 0xb9830, 0xb9830, 0xb9831, 0xb9831, 0xb9832, 0xb9832, 
            0xb9832, 0xb9832, 0xb9840, 0xb9840, 0xb9841, 0xb9841, 0xb9842, 0xb9842, 0xb9842, 0xb9842, 
            0xb9843, 0xb9843, 0xb9843, 0xb9843, 0xb9843, 0xb9843, 0xb9843, 0xb9843, 0xb9850, 0xb9850, 
            0xb9851, 0xb9851, 0xb9852, 0xb9852, 0xb9852, 0xb9852, 0xb9853, 0xb9853, 0xb9853, 0xb9853, 
            0xb9853, 0xb9853, 0xb9853, 0xb9853, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 
            0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 0xb9854, 
            0xb9860, 0xb9860, 0xb9861, 0xb9861, 0xb9862, 0xb9862, 0xb9862, 0xb9862, 0xb9863, 0xb9863, 
            0xb9863, 0xb9863, 0xb9863, 0xb9863, 0xb9863, 0xb9863, 0xb9864, 0xb9864, 0xb9864, 0xb9864, 
            0xb9864, 0xb9864, 0xb9864, 0xb9864, 0xb9864, 0xb9864, 0xb9864, 0xb9864, 0xb9864, 0xb9864, 
            0xb9864, 0xb9864, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 
            0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 
            0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9865, 
            0xb9865, 0xb9865, 0xb9865, 0xb9865, 0xb9870, 0xb9870, 0xb9871, 0xb9871, 0xb9872, 0xb9872, 
            0xb9872, 0xb9872, 0xb9873, 0xb9873, 0xb9873, 0xb9873, 0xb9873, 0xb9873, 0xb9873, 0xb9873, 
            0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 
            0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9874, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 
            0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 
            0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 
            0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9875, 0xb9876, 0xb9876, 
            0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 
            0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 
            0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 
            0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 
            0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 
            0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 0xb9876, 
            0xb9876, 0xb9876, 0xba000, 0xba000, 0xba100, 0xba100, 0xba200, 0xba200, 0xba210, 0xba210, 
            0xba300, 0xba300, 0xba310, 0xba310, 0xba320, 0xba320, 0xba321, 0xba321, 0xba400, 0xba400, 
            0xba410, 0xba410, 0xba420, 0xba420, 0xba421, 0xba421, 0xba430, 0xba430, 0xba431, 0xba431, 
            0xba432, 0xba432, 0xba432, 0xba432, 0xba500, 0xba500, 0xba510, 0xba510, 0xba520, 0xba520, 
            0xba521, 0xba521, 0xba530, 0xba530, 0xba531, 0xba531, 0xba532, 0xba532, 0xba532, 0xba532, 
            0xba540, 0xba540, 0xba541, 0xba541, 0xba542, 0xba542, 0xba542, 0xba542, 0xba543, 0xba543, 
            0xba543, 0xba543, 0xba543, 0xba543, 0xba543, 0xba543, 0xba600, 0xba600, 0xba610, 0xba610, 
            0xba620, 0xba620, 0xba621, 0xba621, 0xba630, 0xba630, 0xba631, 0xba631, 0xba632, 0xba632, 
            0xba632, 0xba632, 0xba640, 0xba640, 0xba641, 0xba641, 0xba642, 0xba642, 0xba642, 0xba642, 
            0xba643, 0xba643, 0xba643, 0xba643, 0xba643, 0xba643, 0xba643, 0xba643, 0xba650, 0xba650, 
            0xba651, 0xba651, 0xba652, 0xba652, 0xba652, 0xba652, 0xba653, 0xba653, 0xba653, 0xba653, 
            0xba653, 0xba653, 0xba653, 0xba653, 0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 
            0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 0xba654, 
            0xba700, 0xba700, 0xba710, 0xba710, 0xba720, 0xba720, 0xba721, 0xba721, 0xba730, 0xba730, 
            0xba731, 0xba731, 0xba732, 0xba732, 0xba732, 0xba732, 0xba740, 0xba740, 0xba741, 0xba741, 
            0xba742, 0xba742, 0xba742, 0xba742, 0xba743, 0xba743, 0xba743, 0xba743, 0xba743, 0xba743, 
            0xba743, 0xba743, 0xba750, 0xba750, 0xba751, 0xba751, 0xba752, 0xba752, 0xba752, 0xba752, 
            0xba753, 0xba753, 0xba753, 0xba753, 0xba753, 0xba753, 0xba753, 0xba753, 0xba754, 0xba754, 
            0xba754, 0xba754, 0xba754, 0xba754, 0xba754, 0xba754, 0xba754, 0xba754, 0xba754, 0xba754, 
            0xba754, 0xba754, 0xba754, 0xba754, 0xba760, 0xba760, 0xba761, 0xba761, 0xba762, 0xba762, 
            0xba762, 0xba762, 0xba763, 0xba763, 0xba763, 0xba763, 0xba763, 0xba763, 0xba763, 0xba763, 
            0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 
            0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 0xba764, 0xba765, 0xba765, 0xba765, 0xba765, 
            0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 
            0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 
            0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba765, 0xba800, 0xba800, 
            0xba810, 0xba810, 0xba820, 0xba820, 0xba821, 0xba821, 0xba830, 0xba830, 0xba831, 0xba831, 
            0xba832, 0xba832, 0xba832, 0xba832, 0xba840, 0xba840, 0xba841, 0xba841, 0xba842, 0xba842, 
            0xba842, 0xba842, 0xba843, 0xba843, 0xba843, 0xba843, 0xba843, 0xba843, 0xba843, 0xba843, 
            0xba850, 0xba850, 0xba851, 0xba851, 0xba852, 0xba852, 0xba852, 0xba852, 0xba853, 0xba853, 
            0xba853, 0xba853, 0xba853, 0xba853, 0xba853, 0xba853, 0xba854, 0xba854, 0xba854, 0xba854, 
            0xba854, 0xba854, 0xba854, 0xba854, 0xba854, 0xba854, 0xba854, 0xba854, 0xba854, 0xba854, 
            0xba854, 0xba854, 0xba860, 0xba860, 0xba861, 0xba861, 0xba862, 0xba862, 0xba862, 0xba862, 
            0xba863, 0xba863, 0xba863, 0xba863, 0xba863, 0xba863, 0xba863, 0xba863, 0xba864, 0xba864, 
            0xba864, 0xba864, 0xba864, 0xba864, 0xba864, 0xba864, 0xba864, 0xba864, 0xba864, 0xba864, 
            0xba864, 0xba864, 0xba864, 0xba864, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 
            0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 
            0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 
            0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba865, 0xba870, 0xba870, 0xba871, 0xba871, 
            0xba872, 0xba872, 0xba872, 0xba872, 0xba873, 0xba873, 0xba873, 0xba873, 0xba873, 0xba873, 
            0xba873, 0xba873, 0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 
            0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 0xba874, 0xba875, 0xba875, 
            0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 
            0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 
            0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 0xba875, 
            0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 
            0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 
            0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 
            0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 
            0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 
            0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 0xba876, 
            0xba876, 0xba876, 0xba876, 0xba876, 0xba900, 0xba900, 0xba910, 0xba910, 0xba920, 0xba920, 
            0xba921, 0xba921, 0xba930, 0xba930, 0xba931, 0xba931, 0xba932, 0xba932, 0xba932, 0xba932, 
            0xba940, 0xba940, 0xba941, 0xba941, 0xba942, 0xba942, 0xba942, 0xba942, 0xba943, 0xba943, 
            0xba943, 0xba943, 0xba943, 0xba943, 0xba943, 0xba943, 0xba950, 0xba950, 0xba951, 0xba951, 
            0xba952, 0xba952, 0xba952, 0xba952, 0xba953, 0xba953, 0xba953, 0xba953, 0xba953, 0xba953, 
            0xba953, 0xba953, 0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 
            0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 0xba954, 0xba960, 0xba960, 
            0xba961, 0xba961, 0xba962, 0xba962, 0xba962, 0xba962, 0xba963, 0xba963, 0xba963, 0xba963, 
            0xba963, 0xba963, 0xba963, 0xba963, 0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 
            0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 0xba964, 
            0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 
            0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 
            0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 0xba965, 
            0xba965, 0xba965, 0xba970, 0xba970, 0xba971, 0xba971, 0xba972, 0xba972, 0xba972, 0xba972, 
            0xba973, 0xba973, 0xba973, 0xba973, 0xba973, 0xba973, 0xba973, 0xba973, 0xba974, 0xba974, 
            0xba974, 0xba974, 0xba974, 0xba974, 0xba974, 0xba974, 0xba974, 0xba974, 0xba974, 0xba974, 
            0xba974, 0xba974, 0xba974, 0xba974, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 
            0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 
            0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 
            0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba975, 0xba976, 0xba976, 0xba976, 0xba976, 
            0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 
            0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 
            0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 
            0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 
            0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 
            0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 0xba976, 
            0xba980, 0xba980, 0xba981, 0xba981, 0xba982, 0xba982, 0xba982, 0xba982, 0xba983, 0xba983, 
            0xba983, 0xba983, 0xba983, 0xba983, 0xba983, 0xba983, 0xba984, 0xba984, 0xba984, 0xba984, 
            0xba984, 0xba984, 0xba984, 0xba984, 0xba984, 0xba984, 0xba984, 0xba984, 0xba984, 0xba984, 
            0xba984, 0xba984, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 
            0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 
            0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 0xba985, 
            0xba985, 0xba985, 0xba985, 0xba985, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 
            0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 
            0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 
            0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 
            0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 
            0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 
            0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba986, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 
            0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xba987, 0xc0000, 0xc0000, 0xc1000, 0xc1000, 
            0xc2000, 0xc2000, 0xc2100, 0xc2100, 0xc3000, 0xc3000, 0xc3100, 0xc3100, 0xc3200, 0xc3200, 
            0xc3210, 0xc3210, 0xc4000, 0xc4000, 0xc4100, 0xc4100, 0xc4200, 0xc4200, 0xc4210, 0xc4210, 
            0xc4300, 0xc4300, 0xc4310, 0xc4310, 0xc4320, 0xc4320, 0xc4321, 0xc4321, 0xc5000, 0xc5000, 
            0xc5100, 0xc5100, 0xc5200, 0xc5200, 0xc5210, 0xc5210, 0xc5300, 0xc5300, 0xc5310, 0xc5310, 
            0xc5320, 0xc5320, 0xc5321, 0xc5321, 0xc5400, 0xc5400, 0xc5410, 0xc5410, 0xc5420, 0xc5420, 
            0xc5421, 0xc5421, 0xc5430, 0xc5430, 0xc5431, 0xc5431, 0xc5432, 0xc5432, 0xc5432, 0xc5432, 
            0xc6000, 0xc6000, 0xc6100, 0xc6100, 0xc6200, 0xc6200, 0xc6210, 0xc6210, 0xc6300, 0xc6300, 
            0xc6310, 0xc6310, 0xc6320, 0xc6320, 0xc6321, 0xc6321, 0xc6400, 0xc6400, 0xc6410, 0xc6410, 
            0xc6420, 0xc6420, 0xc6421, 0xc6421, 0xc6430, 0xc6430, 0xc6431, 0xc6431, 0xc6432, 0xc6432, 
            0xc6432, 0xc6432, 0xc6500, 0xc6500, 0xc6510, 0xc6510, 0xc6520, 0xc6520, 0xc6521, 0xc6521, 
            0xc6530, 0xc6530, 0xc6531, 0xc6531, 0xc6532, 0xc6532, 0xc6532, 0xc6532, 0xc6540, 0xc6540, 
            0xc6541, 0xc6541, 0xc6542, 0xc6542, 0xc6542, 0xc6542, 0xc6543, 0xc6543, 0xc6543, 0xc6543, 
            0xc6543, 0xc6543, 0xc6543, 0xc6543, 0xc7000, 0xc7000, 0xc7100, 0xc7100, 0xc7200, 0xc7200, 
            0xc7210, 0xc7210, 0xc7300, 0xc7300, 0xc7310, 0xc7310, 0xc7320, 0xc7320, 0xc7321, 0xc7321, 
            0xc7400, 0xc7400, 0xc7410, 0xc7410, 0xc7420, 0xc7420, 0xc7421, 0xc7421, 0xc7430, 0xc7430, 
            0xc7431, 0xc7431, 0xc7432, 0xc7432, 0xc7432, 0xc7432, 0xc7500, 0xc7500, 0xc7510, 0xc7510, 
            0xc7520, 0xc7520, 0xc7521, 0xc7521, 0xc7530, 0xc7530, 0xc7531, 0xc7531, 0xc7532, 0xc7532, 
            0xc7532, 0xc7532, 0xc7540, 0xc7540, 0xc7541, 0xc7541, 0xc7542, 0xc7542, 0xc7542, 0xc7542, 
            0xc7543, 0xc7543, 0xc7543, 0xc7543, 0xc7543, 0xc7543, 0xc7543, 0xc7543, 0xc7600, 0xc7600, 
            0xc7610, 0xc7610, 0xc7620, 0xc7620, 0xc7621, 0xc7621, 0xc7630, 0xc7630, 0xc7631, 0xc7631, 
            0xc7632, 0xc7632, 0xc7632, 0xc7632, 0xc7640, 0xc7640, 0xc7641, 0xc7641, 0xc7642, 0xc7642, 
            0xc7642, 0xc7642, 0xc7643, 0xc7643, 0xc7643, 0xc7643, 0xc7643, 0xc7643, 0xc7643, 0xc7643, 
            0xc7650, 0xc7650, 0xc7651, 0xc7651, 0xc7652, 0xc7652, 0xc7652, 0xc7652, 0xc7653, 0xc7653, 
            0xc7653, 0xc7653, 0xc7653, 0xc7653, 0xc7653, 0xc7653, 0xc7654, 0xc7654, 0xc7654, 0xc7654, 
            0xc7654, 0xc7654, 0xc7654, 0xc7654, 0xc7654, 0xc7654, 0xc7654, 0xc7654, 0xc7654, 0xc7654, 
            0xc7654, 0xc7654, 0xc8000, 0xc8000, 0xc8100, 0xc8100, 0xc8200, 0xc8200, 0xc8210, 0xc8210, 
            0xc8300, 0xc8300, 0xc8310, 0xc8310, 0xc8320, 0xc8320, 0xc8321, 0xc8321, 0xc8400, 0xc8400, 
            0xc8410, 0xc8410, 0xc8420, 0xc8420, 0xc8421, 0xc8421, 0xc8430, 0xc8430, 0xc8431, 0xc8431, 
            0xc8432, 0xc8432, 0xc8432, 0xc8432, 0xc8500, 0xc8500, 0xc8510, 0xc8510, 0xc8520, 0xc8520, 
            0xc8521, 0xc8521, 0xc8530, 0xc8530, 0xc8531, 0xc8531, 0xc8532, 0xc8532, 0xc8532, 0xc8532, 
            0xc8540, 0xc8540, 0xc8541, 0xc8541, 0xc8542, 0xc8542, 0xc8542, 0xc8542, 0xc8543, 0xc8543, 
            0xc8543, 0xc8543, 0xc8543, 0xc8543, 0xc8543, 0xc8543, 0xc8600, 0xc8600, 0xc8610, 0xc8610, 
            0xc8620, 0xc8620, 0xc8621, 0xc8621, 0xc8630, 0xc8630, 0xc8631, 0xc8631, 0xc8632, 0xc8632, 
            0xc8632, 0xc8632, 0xc8640, 0xc8640, 0xc8641, 0xc8641, 0xc8642, 0xc8642, 0xc8642, 0xc8642, 
            0xc8643, 0xc8643, 0xc8643, 0xc8643, 0xc8643, 0xc8643, 0xc8643, 0xc8643, 0xc8650, 0xc8650, 
            0xc8651, 0xc8651, 0xc8652, 0xc8652, 0xc8652, 0xc8652, 0xc8653, 0xc8653, 0xc8653, 0xc8653, 
            0xc8653, 0xc8653, 0xc8653, 0xc8653, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 
            0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 0xc8654, 
            0xc8700, 0xc8700, 0xc8710, 0xc8710, 0xc8720, 0xc8720, 0xc8721, 0xc8721, 0xc8730, 0xc8730, 
            0xc8731, 0xc8731, 0xc8732, 0xc8732, 0xc8732, 0xc8732, 0xc8740, 0xc8740, 0xc8741, 0xc8741, 
            0xc8742, 0xc8742, 0xc8742, 0xc8742, 0xc8743, 0xc8743, 0xc8743, 0xc8743, 0xc8743, 0xc8743, 
            0xc8743, 0xc8743, 0xc8750, 0xc8750, 0xc8751, 0xc8751, 0xc8752, 0xc8752, 0xc8752, 0xc8752, 
            0xc8753, 0xc8753, 0xc8753, 0xc8753, 0xc8753, 0xc8753, 0xc8753, 0xc8753, 0xc8754, 0xc8754, 
            0xc8754, 0xc8754, 0xc8754, 0xc8754, 0xc8754, 0xc8754, 0xc8754, 0xc8754, 0xc8754, 0xc8754, 
            0xc8754, 0xc8754, 0xc8754, 0xc8754, 0xc8760, 0xc8760, 0xc8761, 0xc8761, 0xc8762, 0xc8762, 
            0xc8762, 0xc8762, 0xc8763, 0xc8763, 0xc8763, 0xc8763, 0xc8763, 0xc8763, 0xc8763, 0xc8763, 
            0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 
            0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8764, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 
            0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 
            0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 
            0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc8765, 0xc9000, 0xc9000, 
            0xc9100, 0xc9100, 0xc9200, 0xc9200, 0xc9210, 0xc9210, 0xc9300, 0xc9300, 0xc9310, 0xc9310, 
            0xc9320, 0xc9320, 0xc9321, 0xc9321, 0xc9400, 0xc9400, 0xc9410, 0xc9410, 0xc9420, 0xc9420, 
            0xc9421, 0xc9421, 0xc9430, 0xc9430, 0xc9431, 0xc9431, 0xc9432, 0xc9432, 0xc9432, 0xc9432, 
            0xc9500, 0xc9500, 0xc9510, 0xc9510, 0xc9520, 0xc9520, 0xc9521, 0xc9521, 0xc9530, 0xc9530, 
            0xc9531, 0xc9531, 0xc9532, 0xc9532, 0xc9532, 0xc9532, 0xc9540, 0xc9540, 0xc9541, 0xc9541, 
            0xc9542, 0xc9542, 0xc9542, 0xc9542, 0xc9543, 0xc9543, 0xc9543, 0xc9543, 0xc9543, 0xc9543, 
            0xc9543, 0xc9543, 0xc9600, 0xc9600, 0xc9610, 0xc9610, 0xc9620, 0xc9620, 0xc9621, 0xc9621, 
            0xc9630, 0xc9630, 0xc9631, 0xc9631, 0xc9632, 0xc9632, 0xc9632, 0xc9632, 0xc9640, 0xc9640, 
            0xc9641, 0xc9641, 0xc9642, 0xc9642, 0xc9642, 0xc9642, 0xc9643, 0xc9643, 0xc9643, 0xc9643, 
            0xc9643, 0xc9643, 0xc9643, 0xc9643, 0xc9650, 0xc9650, 0xc9651, 0xc9651, 0xc9652, 0xc9652, 
            0xc9652, 0xc9652, 0xc9653, 0xc9653, 0xc9653, 0xc9653, 0xc9653, 0xc9653, 0xc9653, 0xc9653, 
            0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 
            0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9654, 0xc9700, 0xc9700, 0xc9710, 0xc9710, 
            0xc9720, 0xc9720, 0xc9721, 0xc9721, 0xc9730, 0xc9730, 0xc9731, 0xc9731, 0xc9732, 0xc9732, 
            0xc9732, 0xc9732, 0xc9740, 0xc9740, 0xc9741, 0xc9741, 0xc9742, 0xc9742, 0xc9742, 0xc9742, 
            0xc9743, 0xc9743, 0xc9743, 0xc9743, 0xc9743, 0xc9743, 0xc9743, 0xc9743, 0xc9750, 0xc9750, 
            0xc9751, 0xc9751, 0xc9752, 0xc9752, 0xc9752, 0xc9752, 0xc9753, 0xc9753, 0xc9753, 0xc9753, 
            0xc9753, 0xc9753, 0xc9753, 0xc9753, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 
            0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 0xc9754, 
            0xc9760, 0xc9760, 0xc9761, 0xc9761, 0xc9762, 0xc9762, 0xc9762, 0xc9762, 0xc9763, 0xc9763, 
            0xc9763, 0xc9763, 0xc9763, 0xc9763, 0xc9763, 0xc9763, 0xc9764, 0xc9764, 0xc9764, 0xc9764, 
            0xc9764, 0xc9764, 0xc9764, 0xc9764, 0xc9764, 0xc9764, 0xc9764, 0xc9764, 0xc9764, 0xc9764, 
            0xc9764, 0xc9764, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 
            0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 
            0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9765, 
            0xc9765, 0xc9765, 0xc9765, 0xc9765, 0xc9800, 0xc9800, 0xc9810, 0xc9810, 0xc9820, 0xc9820, 
            0xc9821, 0xc9821, 0xc9830, 0xc9830, 0xc9831, 0xc9831, 0xc9832, 0xc9832, 0xc9832, 0xc9832, 
            0xc9840, 0xc9840, 0xc9841, 0xc9841, 0xc9842, 0xc9842, 0xc9842, 0xc9842, 0xc9843, 0xc9843, 
            0xc9843, 0xc9843, 0xc9843, 0xc9843, 0xc9843, 0xc9843, 0xc9850, 0xc9850, 0xc9851, 0xc9851, 
            0xc9852, 0xc9852, 0xc9852, 0xc9852, 0xc9853, 0xc9853, 0xc9853, 0xc9853, 0xc9853, 0xc9853, 
            0xc9853, 0xc9853, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 
            0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9854, 0xc9860, 0xc9860, 
            0xc9861, 0xc9861, 0xc9862, 0xc9862, 0xc9862, 0xc9862, 0xc9863, 0xc9863, 0xc9863, 0xc9863, 
            0xc9863, 0xc9863, 0xc9863, 0xc9863, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 
            0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 0xc9864, 
            0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 
            0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 
            0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 0xc9865, 
            0xc9865, 0xc9865, 0xc9870, 0xc9870, 0xc9871, 0xc9871, 0xc9872, 0xc9872, 0xc9872, 0xc9872, 
            0xc9873, 0xc9873, 0xc9873, 0xc9873, 0xc9873, 0xc9873, 0xc9873, 0xc9873, 0xc9874, 0xc9874, 
            0xc9874, 0xc9874, 0xc9874, 0xc9874, 0xc9874, 0xc9874, 0xc9874, 0xc9874, 0xc9874, 0xc9874, 
            0xc9874, 0xc9874, 0xc9874, 0xc9874, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 
            0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 
            0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 
            0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9875, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 
            0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 
            0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 
            0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 
            0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 
            0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 
            0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 0xc9876, 
            0xca000, 0xca000, 0xca100, 0xca100, 0xca200, 0xca200, 0xca210, 0xca210, 0xca300, 0xca300, 
            0xca310, 0xca310, 0xca320, 0xca320, 0xca321, 0xca321, 0xca400, 0xca400, 0xca410, 0xca410, 
            0xca420, 0xca420, 0xca421, 0xca421, 0xca430, 0xca430, 0xca431, 0xca431, 0xca432, 0xca432, 
            0xca432, 0xca432, 0xca500, 0xca500, 0xca510, 0xca510, 0xca520, 0xca520, 0xca521, 0xca521, 
            0xca530, 0xca530, 0xca531, 0xca531, 0xca532, 0xca532, 0xca532, 0xca532, 0xca540, 0xca540, 
            0xca541, 0xca541, 0xca542, 0xca542, 0xca542, 0xca542, 0xca543, 0xca543, 0xca543, 0xca543, 
            0xca543, 0xca543, 0xca543, 0xca543, 0xca600, 0xca600, 0xca610, 0xca610, 0xca620, 0xca620, 
            0xca621, 0xca621, 0xca630, 0xca630, 0xca631, 0xca631, 0xca632, 0xca632, 0xca632, 0xca632, 
            0xca640, 0xca640, 0xca641, 0xca641, 0xca642, 0xca642, 0xca642, 0xca642, 0xca643, 0xca643, 
            0xca643, 0xca643, 0xca643, 0xca643, 0xca643, 0xca643, 0xca650, 0xca650, 0xca651, 0xca651, 
            0xca652, 0xca652, 0xca652, 0xca652, 0xca653, 0xca653, 0xca653, 0xca653, 0xca653, 0xca653, 
            0xca653, 0xca653, 0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 
            0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 0xca654, 0xca700, 0xca700, 
            0xca710, 0xca710, 0xca720, 0xca720, 0xca721, 0xca721, 0xca730, 0xca730, 0xca731, 0xca731, 
            0xca732, 0xca732, 0xca732, 0xca732, 0xca740, 0xca740, 0xca741, 0xca741, 0xca742, 0xca742, 
            0xca742, 0xca742, 0xca743, 0xca743, 0xca743, 0xca743, 0xca743, 0xca743, 0xca743, 0xca743, 
            0xca750, 0xca750, 0xca751, 0xca751, 0xca752, 0xca752, 0xca752, 0xca752, 0xca753, 0xca753, 
            0xca753, 0xca753, 0xca753, 0xca753, 0xca753, 0xca753, 0xca754, 0xca754, 0xca754, 0xca754, 
            0xca754, 0xca754, 0xca754, 0xca754, 0xca754, 0xca754, 0xca754, 0xca754, 0xca754, 0xca754, 
            0xca754, 0xca754, 0xca760, 0xca760, 0xca761, 0xca761, 0xca762, 0xca762, 0xca762, 0xca762, 
            0xca763, 0xca763, 0xca763, 0xca763, 0xca763, 0xca763, 0xca763, 0xca763, 0xca764, 0xca764, 
            0xca764, 0xca764, 0xca764, 0xca764, 0xca764, 0xca764, 0xca764, 0xca764, 0xca764, 0xca764, 
            0xca764, 0xca764, 0xca764, 0xca764, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 
            0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 
            0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 
            0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca765, 0xca800, 0xca800, 0xca810, 0xca810, 
            0xca820, 0xca820, 0xca821, 0xca821, 0xca830, 0xca830, 0xca831, 0xca831, 0xca832, 0xca832, 
            0xca832, 0xca832, 0xca840, 0xca840, 0xca841, 0xca841, 0xca842, 0xca842, 0xca842, 0xca842, 
            0xca843, 0xca843, 0xca843, 0xca843, 0xca843, 0xca843, 0xca843, 0xca843, 0xca850, 0xca850, 
            0xca851, 0xca851, 0xca852, 0xca852, 0xca852, 0xca852, 0xca853, 0xca853, 0xca853, 0xca853, 
            0xca853, 0xca853, 0xca853, 0xca853, 0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 
            0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 0xca854, 
            0xca860, 0xca860, 0xca861, 0xca861, 0xca862, 0xca862, 0xca862, 0xca862, 0xca863, 0xca863, 
            0xca863, 0xca863, 0xca863, 0xca863, 0xca863, 0xca863, 0xca864, 0xca864, 0xca864, 0xca864, 
            0xca864, 0xca864, 0xca864, 0xca864, 0xca864, 0xca864, 0xca864, 0xca864, 0xca864, 0xca864, 
            0xca864, 0xca864, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 
            0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 
            0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 0xca865, 
            0xca865, 0xca865, 0xca865, 0xca865, 0xca870, 0xca870, 0xca871, 0xca871, 0xca872, 0xca872, 
            0xca872, 0xca872, 0xca873, 0xca873, 0xca873, 0xca873, 0xca873, 0xca873, 0xca873, 0xca873, 
            0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 
            0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 0xca874, 0xca875, 0xca875, 0xca875, 0xca875, 
            0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 
            0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 
            0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca875, 0xca876, 0xca876, 
            0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 
            0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 
            0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 
            0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 
            0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 
            0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 0xca876, 
            0xca876, 0xca876, 0xca900, 0xca900, 0xca910, 0xca910, 0xca920, 0xca920, 0xca921, 0xca921, 
            0xca930, 0xca930, 0xca931, 0xca931, 0xca932, 0xca932, 0xca932, 0xca932, 0xca940, 0xca940, 
            0xca941, 0xca941, 0xca942, 0xca942, 0xca942, 0xca942, 0xca943, 0xca943, 0xca943, 0xca943, 
            0xca943, 0xca943, 0xca943, 0xca943, 0xca950, 0xca950, 0xca951, 0xca951, 0xca952, 0xca952, 
            0xca952, 0xca952, 0xca953, 0xca953, 0xca953, 0xca953, 0xca953, 0xca953, 0xca953, 0xca953, 
            0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 
            0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 0xca954, 0xca960, 0xca960, 0xca961, 0xca961, 
            0xca962, 0xca962, 0xca962, 0xca962, 0xca963, 0xca963, 0xca963, 0xca963, 0xca963, 0xca963, 
            0xca963, 0xca963, 0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 
            0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 0xca964, 0xca965, 0xca965, 
            0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 
            0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 
            0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 0xca965, 
            0xca970, 0xca970, 0xca971, 0xca971, 0xca972, 0xca972, 0xca972, 0xca972, 0xca973, 0xca973, 
            0xca973, 0xca973, 0xca973, 0xca973, 0xca973, 0xca973, 0xca974, 0xca974, 0xca974, 0xca974, 
            0xca974, 0xca974, 0xca974, 0xca974, 0xca974, 0xca974, 0xca974, 0xca974, 0xca974, 0xca974, 
            0xca974, 0xca974, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 
            0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 
            0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 0xca975, 
            0xca975, 0xca975, 0xca975, 0xca975, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 
            0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 
            0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 
            0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 
            0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 
            0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 
            0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca976, 0xca980, 0xca980, 
            0xca981, 0xca981, 0xca982, 0xca982, 0xca982, 0xca982, 0xca983, 0xca983, 0xca983, 0xca983, 
            0xca983, 0xca983, 0xca983, 0xca983, 0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 
            0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 0xca984, 
            0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 
            0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 
            0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 0xca985, 
            0xca985, 0xca985, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 
            0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 
            0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 
            0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 
            0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 
            0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 
            0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca986, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 0xca987, 
            0xca987, 0xca987, 0xca987, 0xca987, 0xcb000, 0xcb000, 0xcb100, 0xcb100, 0xcb200, 0xcb200, 
            0xcb210, 0xcb210, 0xcb300, 0xcb300, 0xcb310, 0xcb310, 0xcb320, 0xcb320, 0xcb321, 0xcb321, 
            0xcb400, 0xcb400, 0xcb410, 0xcb410, 0xcb420, 0xcb420, 0xcb421, 0xcb421, 0xcb430, 0xcb430, 
            0xcb431, 0xcb431, 0xcb432, 0xcb432, 0xcb432, 0xcb432, 0xcb500, 0xcb500, 0xcb510, 0xcb510, 
            0xcb520, 0xcb520, 0xcb521, 0xcb521, 0xcb530, 0xcb530, 0xcb531, 0xcb531, 0xcb532, 0xcb532, 
            0xcb532, 0xcb532, 0xcb540, 0xcb540, 0xcb541, 0xcb541, 0xcb542, 0xcb542, 0xcb542, 0xcb542, 
            0xcb543, 0xcb543, 0xcb543, 0xcb543, 0xcb543, 0xcb543, 0xcb543, 0xcb543, 0xcb600, 0xcb600, 
            0xcb610, 0xcb610, 0xcb620, 0xcb620, 0xcb621, 0xcb621, 0xcb630, 0xcb630, 0xcb631, 0xcb631, 
            0xcb632, 0xcb632, 0xcb632, 0xcb632, 0xcb640, 0xcb640, 0xcb641, 0xcb641, 0xcb642, 0xcb642, 
            0xcb642, 0xcb642, 0xcb643, 0xcb643, 0xcb643, 0xcb643, 0xcb643, 0xcb643, 0xcb643, 0xcb643, 
            0xcb650, 0xcb650, 0xcb651, 0xcb651, 0xcb652, 0xcb652, 0xcb652, 0xcb652, 0xcb653, 0xcb653, 
            0xcb653, 0xcb653, 0xcb653, 0xcb653, 0xcb653, 0xcb653, 0xcb654, 0xcb654, 0xcb654, 0xcb654, 
            0xcb654, 0xcb654, 0xcb654, 0xcb654, 0xcb654, 0xcb654, 0xcb654, 0xcb654, 0xcb654, 0xcb654, 
            0xcb654, 0xcb654, 0xcb700, 0xcb700, 0xcb710, 0xcb710, 0xcb720, 0xcb720, 0xcb721, 0xcb721, 
            0xcb730, 0xcb730, 0xcb731, 0xcb731, 0xcb732, 0xcb732, 0xcb732, 0xcb732, 0xcb740, 0xcb740, 
            0xcb741, 0xcb741, 0xcb742, 0xcb742, 0xcb742, 0xcb742, 0xcb743, 0xcb743, 0xcb743, 0xcb743, 
            0xcb743, 0xcb743, 0xcb743, 0xcb743, 0xcb750, 0xcb750, 0xcb751, 0xcb751, 0xcb752, 0xcb752, 
            0xcb752, 0xcb752, 0xcb753, 0xcb753, 0xcb753, 0xcb753, 0xcb753, 0xcb753, 0xcb753, 0xcb753, 
            0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 
            0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb754, 0xcb760, 0xcb760, 0xcb761, 0xcb761, 
            0xcb762, 0xcb762, 0xcb762, 0xcb762, 0xcb763, 0xcb763, 0xcb763, 0xcb763, 0xcb763, 0xcb763, 
            0xcb763, 0xcb763, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 
            0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb764, 0xcb765, 0xcb765, 
            0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 
            0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 
            0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 0xcb765, 
            0xcb800, 0xcb800, 0xcb810, 0xcb810, 0xcb820, 0xcb820, 0xcb821, 0xcb821, 0xcb830, 0xcb830, 
            0xcb831, 0xcb831, 0xcb832, 0xcb832, 0xcb832, 0xcb832, 0xcb840, 0xcb840, 0xcb841, 0xcb841, 
            0xcb842, 0xcb842, 0xcb842, 0xcb842, 0xcb843, 0xcb843, 0xcb843, 0xcb843, 0xcb843, 0xcb843, 
            0xcb843, 0xcb843, 0xcb850, 0xcb850, 0xcb851, 0xcb851, 0xcb852, 0xcb852, 0xcb852, 0xcb852, 
            0xcb853, 0xcb853, 0xcb853, 0xcb853, 0xcb853, 0xcb853, 0xcb853, 0xcb853, 0xcb854, 0xcb854, 
            0xcb854, 0xcb854, 0xcb854, 0xcb854, 0xcb854, 0xcb854, 0xcb854, 0xcb854, 0xcb854, 0xcb854, 
            0xcb854, 0xcb854, 0xcb854, 0xcb854, 0xcb860, 0xcb860, 0xcb861, 0xcb861, 0xcb862, 0xcb862, 
            0xcb862, 0xcb862, 0xcb863, 0xcb863, 0xcb863, 0xcb863, 0xcb863, 0xcb863, 0xcb863, 0xcb863, 
            0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 
            0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb864, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 
            0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 
            0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 
            0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb865, 0xcb870, 0xcb870, 
            0xcb871, 0xcb871, 0xcb872, 0xcb872, 0xcb872, 0xcb872, 0xcb873, 0xcb873, 0xcb873, 0xcb873, 
            0xcb873, 0xcb873, 0xcb873, 0xcb873, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 
            0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 0xcb874, 
            0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 
            0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 
            0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 0xcb875, 
            0xcb875, 0xcb875, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 
            0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 
            0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 
            0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 
            0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 
            0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 
            0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb876, 0xcb900, 0xcb900, 0xcb910, 0xcb910, 
            0xcb920, 0xcb920, 0xcb921, 0xcb921, 0xcb930, 0xcb930, 0xcb931, 0xcb931, 0xcb932, 0xcb932, 
            0xcb932, 0xcb932, 0xcb940, 0xcb940, 0xcb941, 0xcb941, 0xcb942, 0xcb942, 0xcb942, 0xcb942, 
            0xcb943, 0xcb943, 0xcb943, 0xcb943, 0xcb943, 0xcb943, 0xcb943, 0xcb943, 0xcb950, 0xcb950, 
            0xcb951, 0xcb951, 0xcb952, 0xcb952, 0xcb952, 0xcb952, 0xcb953, 0xcb953, 0xcb953, 0xcb953, 
            0xcb953, 0xcb953, 0xcb953, 0xcb953, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 
            0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 0xcb954, 
            0xcb960, 0xcb960, 0xcb961, 0xcb961, 0xcb962, 0xcb962, 0xcb962, 0xcb962, 0xcb963, 0xcb963, 
            0xcb963, 0xcb963, 0xcb963, 0xcb963, 0xcb963, 0xcb963, 0xcb964, 0xcb964, 0xcb964, 0xcb964, 
            0xcb964, 0xcb964, 0xcb964, 0xcb964, 0xcb964, 0xcb964, 0xcb964, 0xcb964, 0xcb964, 0xcb964, 
            0xcb964, 0xcb964, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 
            0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 
            0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb965, 
            0xcb965, 0xcb965, 0xcb965, 0xcb965, 0xcb970, 0xcb970, 0xcb971, 0xcb971, 0xcb972, 0xcb972, 
            0xcb972, 0xcb972, 0xcb973, 0xcb973, 0xcb973, 0xcb973, 0xcb973, 0xcb973, 0xcb973, 0xcb973, 
            0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 
            0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb974, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 
            0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 
            0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 
            0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb975, 0xcb976, 0xcb976, 
            0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 
            0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 
            0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 
            0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 
            0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 
            0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 0xcb976, 
            0xcb976, 0xcb976, 0xcb980, 0xcb980, 0xcb981, 0xcb981, 0xcb982, 0xcb982, 0xcb982, 0xcb982, 
            0xcb983, 0xcb983, 0xcb983, 0xcb983, 0xcb983, 0xcb983, 0xcb983, 0xcb983, 0xcb984, 0xcb984, 
            0xcb984, 0xcb984, 0xcb984, 0xcb984, 0xcb984, 0xcb984, 0xcb984, 0xcb984, 0xcb984, 0xcb984, 
            0xcb984, 0xcb984, 0xcb984, 0xcb984, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 
            0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 
            0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 
            0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb985, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 
            0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 
            0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 
            0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 
            0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 
            0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 
            0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 0xcb986, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 
            0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcb987, 0xcba00, 0xcba00, 
            0xcba10, 0xcba10, 0xcba20, 0xcba20, 0xcba21, 0xcba21, 0xcba30, 0xcba30, 0xcba31, 0xcba31, 
            0xcba32, 0xcba32, 0xcba32, 0xcba32, 0xcba40, 0xcba40, 0xcba41, 0xcba41, 0xcba42, 0xcba42, 
            0xcba42, 0xcba42, 0xcba43, 0xcba43, 0xcba43, 0xcba43, 0xcba43, 0xcba43, 0xcba43, 0xcba43, 
            0xcba50, 0xcba50, 0xcba51, 0xcba51, 0xcba52, 0xcba52, 0xcba52, 0xcba52, 0xcba53, 0xcba53, 
            0xcba53, 0xcba53, 0xcba53, 0xcba53, 0xcba53, 0xcba53, 0xcba54, 0xcba54, 0xcba54, 0xcba54, 
            0xcba54, 0xcba54, 0xcba54, 0xcba54, 0xcba54, 0xcba54, 0xcba54, 0xcba54, 0xcba54, 0xcba54, 
            0xcba54, 0xcba54, 0xcba60, 0xcba60, 0xcba61, 0xcba61, 0xcba62, 0xcba62, 0xcba62, 0xcba62, 
            0xcba63, 0xcba63, 0xcba63, 0xcba63, 0xcba63, 0xcba63, 0xcba63, 0xcba63, 0xcba64, 0xcba64, 
            0xcba64, 0xcba64, 0xcba64, 0xcba64, 0xcba64, 0xcba64, 0xcba64, 0xcba64, 0xcba64, 0xcba64, 
            0xcba64, 0xcba64, 0xcba64, 0xcba64, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 
            0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 
            0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 
            0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba65, 0xcba70, 0xcba70, 0xcba71, 0xcba71, 
            0xcba72, 0xcba72, 0xcba72, 0xcba72, 0xcba73, 0xcba73, 0xcba73, 0xcba73, 0xcba73, 0xcba73, 
            0xcba73, 0xcba73, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 
            0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba74, 0xcba75, 0xcba75, 
            0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 
            0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 
            0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 0xcba75, 
            0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 
            0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 
            0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 
            0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 
            0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 
            0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba76, 
            0xcba76, 0xcba76, 0xcba76, 0xcba76, 0xcba80, 0xcba80, 0xcba81, 0xcba81, 0xcba82, 0xcba82, 
            0xcba82, 0xcba82, 0xcba83, 0xcba83, 0xcba83, 0xcba83, 0xcba83, 0xcba83, 0xcba83, 0xcba83, 
            0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 
            0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba84, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 
            0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 
            0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 
            0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba85, 0xcba86, 0xcba86, 
            0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 
            0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 
            0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 
            0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 
            0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 
            0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 0xcba86, 
            0xcba86, 0xcba86, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 0xcba87, 
            0xcba90, 0xcba90, 0xcba91, 0xcba91, 0xcba92, 0xcba92, 0xcba92, 0xcba92, 0xcba93, 0xcba93, 
            0xcba93, 0xcba93, 0xcba93, 0xcba93, 0xcba93, 0xcba93, 0xcba94, 0xcba94, 0xcba94, 0xcba94, 
            0xcba94, 0xcba94, 0xcba94, 0xcba94, 0xcba94, 0xcba94, 0xcba94, 0xcba94, 0xcba94, 0xcba94, 
            0xcba94, 0xcba94, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 
            0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 
            0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba95, 
            0xcba95, 0xcba95, 0xcba95, 0xcba95, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 
            0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 
            0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 
            0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 
            0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 
            0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 
            0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba96, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 
            0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba97, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 0xcba98, 
            0xcba98, 0xcba98]
    
    __TopCardTable = [0x0, 0x0, 0x1, 0x1, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 
            0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 
            0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 
            0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 
            0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 
            0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 
            0x5, 0x5, 0x5, 0x5, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 
            0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 
            0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 
            0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 
            0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 
            0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 
            0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
            0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 
            0x8, 0x8, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 
            0x9, 0x9, 0x9, 0x9, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 
            0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 
            0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 
            0xc, 0xc]
    
    # This table is equivalent to 1UL left shifted by the index
    # The lookup is faster than the left shift operator
    __CardMasksTable = [0x1,
			0x2,
			0x4,
			0x8,
			0x10,
			0x20,
			0x40,
			0x80,
			0x100,
			0x200,
			0x400,
			0x800,
			0x1000,
			0x2000,
			0x4000,
			0x8000,
			0x10000,
			0x20000,
			0x40000,
			0x80000,
			0x100000,
			0x200000,
			0x400000,
			0x800000,
			0x1000000,
			0x2000000,
			0x4000000,
			0x8000000,
			0x10000000,
			0x20000000,
			0x40000000,
			0x80000000,
			0x100000000,
			0x200000000,
			0x400000000,
			0x800000000,
			0x1000000000,
			0x2000000000,
			0x4000000000,
			0x8000000000,
			0x10000000000,
			0x20000000000,
			0x40000000000,
			0x80000000000,
			0x100000000000,
			0x200000000000,
			0x400000000000,
			0x800000000000,
			0x1000000000000,
			0x2000000000000,
			0x4000000000000,
			0x8000000000000]
        
    CARD_MASKS_TABLE_SIZE = 52

    # converts card number into the equivalent text string
    __CardTable = [
            "2c", "3c", "4c", "5c", "6c", "7c", "8c", "9c", "Tc", "Jc", "Qc", "Kc", "Ac",
			"2d", "3d", "4d", "5d", "6d", "7d", "8d", "9d", "Td", "Jd", "Qd", "Kd", "Ad",
			"2h", "3h", "4h", "5h", "6h", "7h", "8h", "9h", "Th", "Jh", "Qh", "Kh", "Ah",
			"2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s", "Ts", "Js", "Qs", "Ks", "As"]

    # Converts card number into the card suit text string
    __SuitTable = [
            "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs", "Clubs",
			"Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds", "Diamonds",
			"Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts", "Hearts",
			"Spades", "Spades", "Spades", "Spades", "Spades", "Spades", "Spades", "Spades", "Spades", "Spades", "Spades", "Spades", "Spades"]
    
    # Converts card number into the card rank char
    __RankCharTable = [
            '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
			'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
			'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
			'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
        ]
    
    __SuitChar = [
            'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c',
			'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd',
			'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h',
			's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's',
        ]

    #
    # Iterator stuff
    #    
    TwoCardMaskTable = [
        0xc000000000000, 0xa000000000000, 0x9000000000000, 0x8800000000000, 0x8400000000000, 
            0x8200000000000, 0x8100000000000, 0x8080000000000, 0x8040000000000, 0x8020000000000, 
            0x8010000000000, 0x8008000000000, 0x8004000000000, 0x8002000000000, 0x8001000000000, 
            0x8000800000000, 0x8000400000000, 0x8000200000000, 0x8000100000000, 0x8000080000000, 
            0x8000040000000, 0x8000020000000, 0x8000010000000, 0x8000008000000, 0x8000004000000, 
            0x8000002000000, 0x8000001000000, 0x8000000800000, 0x8000000400000, 0x8000000200000, 
            0x8000000100000, 0x8000000080000, 0x8000000040000, 0x8000000020000, 0x8000000010000, 
            0x8000000008000, 0x8000000004000, 0x8000000002000, 0x8000000001000, 0x8000000000800, 
            0x8000000000400, 0x8000000000200, 0x8000000000100, 0x8000000000080, 0x8000000000040, 
            0x8000000000020, 0x8000000000010, 0x8000000000008, 0x8000000000004, 0x8000000000002, 
            0x8000000000001, 0x6000000000000, 0x5000000000000, 0x4800000000000, 0x4400000000000, 
            0x4200000000000, 0x4100000000000, 0x4080000000000, 0x4040000000000, 0x4020000000000, 
            0x4010000000000, 0x4008000000000, 0x4004000000000, 0x4002000000000, 0x4001000000000, 
            0x4000800000000, 0x4000400000000, 0x4000200000000, 0x4000100000000, 0x4000080000000, 
            0x4000040000000, 0x4000020000000, 0x4000010000000, 0x4000008000000, 0x4000004000000, 
            0x4000002000000, 0x4000001000000, 0x4000000800000, 0x4000000400000, 0x4000000200000, 
            0x4000000100000, 0x4000000080000, 0x4000000040000, 0x4000000020000, 0x4000000010000, 
            0x4000000008000, 0x4000000004000, 0x4000000002000, 0x4000000001000, 0x4000000000800, 
            0x4000000000400, 0x4000000000200, 0x4000000000100, 0x4000000000080, 0x4000000000040, 
            0x4000000000020, 0x4000000000010, 0x4000000000008, 0x4000000000004, 0x4000000000002, 
            0x4000000000001, 0x3000000000000, 0x2800000000000, 0x2400000000000, 0x2200000000000, 
            0x2100000000000, 0x2080000000000, 0x2040000000000, 0x2020000000000, 0x2010000000000, 
            0x2008000000000, 0x2004000000000, 0x2002000000000, 0x2001000000000, 0x2000800000000, 
            0x2000400000000, 0x2000200000000, 0x2000100000000, 0x2000080000000, 0x2000040000000, 
            0x2000020000000, 0x2000010000000, 0x2000008000000, 0x2000004000000, 0x2000002000000, 
            0x2000001000000, 0x2000000800000, 0x2000000400000, 0x2000000200000, 0x2000000100000, 
            0x2000000080000, 0x2000000040000, 0x2000000020000, 0x2000000010000, 0x2000000008000, 
            0x2000000004000, 0x2000000002000, 0x2000000001000, 0x2000000000800, 0x2000000000400, 
            0x2000000000200, 0x2000000000100, 0x2000000000080, 0x2000000000040, 0x2000000000020, 
            0x2000000000010, 0x2000000000008, 0x2000000000004, 0x2000000000002, 0x2000000000001, 
            0x1800000000000, 0x1400000000000, 0x1200000000000, 0x1100000000000, 0x1080000000000, 
            0x1040000000000, 0x1020000000000, 0x1010000000000, 0x1008000000000, 0x1004000000000, 
            0x1002000000000, 0x1001000000000, 0x1000800000000, 0x1000400000000, 0x1000200000000, 
            0x1000100000000, 0x1000080000000, 0x1000040000000, 0x1000020000000, 0x1000010000000, 
            0x1000008000000, 0x1000004000000, 0x1000002000000, 0x1000001000000, 0x1000000800000, 
            0x1000000400000, 0x1000000200000, 0x1000000100000, 0x1000000080000, 0x1000000040000, 
            0x1000000020000, 0x1000000010000, 0x1000000008000, 0x1000000004000, 0x1000000002000, 
            0x1000000001000, 0x1000000000800, 0x1000000000400, 0x1000000000200, 0x1000000000100, 
            0x1000000000080, 0x1000000000040, 0x1000000000020, 0x1000000000010, 0x1000000000008, 
            0x1000000000004, 0x1000000000002, 0x1000000000001, 0xc00000000000, 0xa00000000000, 
            0x900000000000, 0x880000000000, 0x840000000000, 0x820000000000, 0x810000000000, 
            0x808000000000, 0x804000000000, 0x802000000000, 0x801000000000, 0x800800000000, 
            0x800400000000, 0x800200000000, 0x800100000000, 0x800080000000, 0x800040000000, 
            0x800020000000, 0x800010000000, 0x800008000000, 0x800004000000, 0x800002000000, 
            0x800001000000, 0x800000800000, 0x800000400000, 0x800000200000, 0x800000100000, 
            0x800000080000, 0x800000040000, 0x800000020000, 0x800000010000, 0x800000008000, 
            0x800000004000, 0x800000002000, 0x800000001000, 0x800000000800, 0x800000000400, 
            0x800000000200, 0x800000000100, 0x800000000080, 0x800000000040, 0x800000000020, 
            0x800000000010, 0x800000000008, 0x800000000004, 0x800000000002, 0x800000000001, 
            0x600000000000, 0x500000000000, 0x480000000000, 0x440000000000, 0x420000000000, 
            0x410000000000, 0x408000000000, 0x404000000000, 0x402000000000, 0x401000000000, 
            0x400800000000, 0x400400000000, 0x400200000000, 0x400100000000, 0x400080000000, 
            0x400040000000, 0x400020000000, 0x400010000000, 0x400008000000, 0x400004000000, 
            0x400002000000, 0x400001000000, 0x400000800000, 0x400000400000, 0x400000200000, 
            0x400000100000, 0x400000080000, 0x400000040000, 0x400000020000, 0x400000010000, 
            0x400000008000, 0x400000004000, 0x400000002000, 0x400000001000, 0x400000000800, 
            0x400000000400, 0x400000000200, 0x400000000100, 0x400000000080, 0x400000000040, 
            0x400000000020, 0x400000000010, 0x400000000008, 0x400000000004, 0x400000000002, 
            0x400000000001, 0x300000000000, 0x280000000000, 0x240000000000, 0x220000000000, 
            0x210000000000, 0x208000000000, 0x204000000000, 0x202000000000, 0x201000000000, 
            0x200800000000, 0x200400000000, 0x200200000000, 0x200100000000, 0x200080000000, 
            0x200040000000, 0x200020000000, 0x200010000000, 0x200008000000, 0x200004000000, 
            0x200002000000, 0x200001000000, 0x200000800000, 0x200000400000, 0x200000200000, 
            0x200000100000, 0x200000080000, 0x200000040000, 0x200000020000, 0x200000010000, 
            0x200000008000, 0x200000004000, 0x200000002000, 0x200000001000, 0x200000000800, 
            0x200000000400, 0x200000000200, 0x200000000100, 0x200000000080, 0x200000000040, 
            0x200000000020, 0x200000000010, 0x200000000008, 0x200000000004, 0x200000000002, 
            0x200000000001, 0x180000000000, 0x140000000000, 0x120000000000, 0x110000000000, 
            0x108000000000, 0x104000000000, 0x102000000000, 0x101000000000, 0x100800000000, 
            0x100400000000, 0x100200000000, 0x100100000000, 0x100080000000, 0x100040000000, 
            0x100020000000, 0x100010000000, 0x100008000000, 0x100004000000, 0x100002000000, 
            0x100001000000, 0x100000800000, 0x100000400000, 0x100000200000, 0x100000100000, 
            0x100000080000, 0x100000040000, 0x100000020000, 0x100000010000, 0x100000008000, 
            0x100000004000, 0x100000002000, 0x100000001000, 0x100000000800, 0x100000000400, 
            0x100000000200, 0x100000000100, 0x100000000080, 0x100000000040, 0x100000000020, 
            0x100000000010, 0x100000000008, 0x100000000004, 0x100000000002, 0x100000000001, 
            0xc0000000000, 0xa0000000000, 0x90000000000, 0x88000000000, 0x84000000000, 
            0x82000000000, 0x81000000000, 0x80800000000, 0x80400000000, 0x80200000000, 
            0x80100000000, 0x80080000000, 0x80040000000, 0x80020000000, 0x80010000000, 
            0x80008000000, 0x80004000000, 0x80002000000, 0x80001000000, 0x80000800000, 
            0x80000400000, 0x80000200000, 0x80000100000, 0x80000080000, 0x80000040000, 
            0x80000020000, 0x80000010000, 0x80000008000, 0x80000004000, 0x80000002000, 
            0x80000001000, 0x80000000800, 0x80000000400, 0x80000000200, 0x80000000100, 
            0x80000000080, 0x80000000040, 0x80000000020, 0x80000000010, 0x80000000008, 
            0x80000000004, 0x80000000002, 0x80000000001, 0x60000000000, 0x50000000000, 
            0x48000000000, 0x44000000000, 0x42000000000, 0x41000000000, 0x40800000000, 
            0x40400000000, 0x40200000000, 0x40100000000, 0x40080000000, 0x40040000000, 
            0x40020000000, 0x40010000000, 0x40008000000, 0x40004000000, 0x40002000000, 
            0x40001000000, 0x40000800000, 0x40000400000, 0x40000200000, 0x40000100000, 
            0x40000080000, 0x40000040000, 0x40000020000, 0x40000010000, 0x40000008000, 
            0x40000004000, 0x40000002000, 0x40000001000, 0x40000000800, 0x40000000400, 
            0x40000000200, 0x40000000100, 0x40000000080, 0x40000000040, 0x40000000020, 
            0x40000000010, 0x40000000008, 0x40000000004, 0x40000000002, 0x40000000001, 
            0x30000000000, 0x28000000000, 0x24000000000, 0x22000000000, 0x21000000000, 
            0x20800000000, 0x20400000000, 0x20200000000, 0x20100000000, 0x20080000000, 
            0x20040000000, 0x20020000000, 0x20010000000, 0x20008000000, 0x20004000000, 
            0x20002000000, 0x20001000000, 0x20000800000, 0x20000400000, 0x20000200000, 
            0x20000100000, 0x20000080000, 0x20000040000, 0x20000020000, 0x20000010000, 
            0x20000008000, 0x20000004000, 0x20000002000, 0x20000001000, 0x20000000800, 
            0x20000000400, 0x20000000200, 0x20000000100, 0x20000000080, 0x20000000040, 
            0x20000000020, 0x20000000010, 0x20000000008, 0x20000000004, 0x20000000002, 
            0x20000000001, 0x18000000000, 0x14000000000, 0x12000000000, 0x11000000000, 
            0x10800000000, 0x10400000000, 0x10200000000, 0x10100000000, 0x10080000000, 
            0x10040000000, 0x10020000000, 0x10010000000, 0x10008000000, 0x10004000000, 
            0x10002000000, 0x10001000000, 0x10000800000, 0x10000400000, 0x10000200000, 
            0x10000100000, 0x10000080000, 0x10000040000, 0x10000020000, 0x10000010000, 
            0x10000008000, 0x10000004000, 0x10000002000, 0x10000001000, 0x10000000800, 
            0x10000000400, 0x10000000200, 0x10000000100, 0x10000000080, 0x10000000040, 
            0x10000000020, 0x10000000010, 0x10000000008, 0x10000000004, 0x10000000002, 
            0x10000000001, 0xc000000000, 0xa000000000, 0x9000000000, 0x8800000000, 
            0x8400000000, 0x8200000000, 0x8100000000, 0x8080000000, 0x8040000000, 
            0x8020000000, 0x8010000000, 0x8008000000, 0x8004000000, 0x8002000000, 
            0x8001000000, 0x8000800000, 0x8000400000, 0x8000200000, 0x8000100000, 
            0x8000080000, 0x8000040000, 0x8000020000, 0x8000010000, 0x8000008000, 
            0x8000004000, 0x8000002000, 0x8000001000, 0x8000000800, 0x8000000400, 
            0x8000000200, 0x8000000100, 0x8000000080, 0x8000000040, 0x8000000020, 
            0x8000000010, 0x8000000008, 0x8000000004, 0x8000000002, 0x8000000001, 
            0x6000000000, 0x5000000000, 0x4800000000, 0x4400000000, 0x4200000000, 
            0x4100000000, 0x4080000000, 0x4040000000, 0x4020000000, 0x4010000000, 
            0x4008000000, 0x4004000000, 0x4002000000, 0x4001000000, 0x4000800000, 
            0x4000400000, 0x4000200000, 0x4000100000, 0x4000080000, 0x4000040000, 
            0x4000020000, 0x4000010000, 0x4000008000, 0x4000004000, 0x4000002000, 
            0x4000001000, 0x4000000800, 0x4000000400, 0x4000000200, 0x4000000100, 
            0x4000000080, 0x4000000040, 0x4000000020, 0x4000000010, 0x4000000008, 
            0x4000000004, 0x4000000002, 0x4000000001, 0x3000000000, 0x2800000000, 
            0x2400000000, 0x2200000000, 0x2100000000, 0x2080000000, 0x2040000000, 
            0x2020000000, 0x2010000000, 0x2008000000, 0x2004000000, 0x2002000000, 
            0x2001000000, 0x2000800000, 0x2000400000, 0x2000200000, 0x2000100000, 
            0x2000080000, 0x2000040000, 0x2000020000, 0x2000010000, 0x2000008000, 
            0x2000004000, 0x2000002000, 0x2000001000, 0x2000000800, 0x2000000400, 
            0x2000000200, 0x2000000100, 0x2000000080, 0x2000000040, 0x2000000020, 
            0x2000000010, 0x2000000008, 0x2000000004, 0x2000000002, 0x2000000001, 
            0x1800000000, 0x1400000000, 0x1200000000, 0x1100000000, 0x1080000000, 
            0x1040000000, 0x1020000000, 0x1010000000, 0x1008000000, 0x1004000000, 
            0x1002000000, 0x1001000000, 0x1000800000, 0x1000400000, 0x1000200000, 
            0x1000100000, 0x1000080000, 0x1000040000, 0x1000020000, 0x1000010000, 
            0x1000008000, 0x1000004000, 0x1000002000, 0x1000001000, 0x1000000800, 
            0x1000000400, 0x1000000200, 0x1000000100, 0x1000000080, 0x1000000040, 
            0x1000000020, 0x1000000010, 0x1000000008, 0x1000000004, 0x1000000002, 
            0x1000000001, 0xc00000000, 0xa00000000, 0x900000000, 0x880000000, 
            0x840000000, 0x820000000, 0x810000000, 0x808000000, 0x804000000, 
            0x802000000, 0x801000000, 0x800800000, 0x800400000, 0x800200000, 
            0x800100000, 0x800080000, 0x800040000, 0x800020000, 0x800010000, 
            0x800008000, 0x800004000, 0x800002000, 0x800001000, 0x800000800, 
            0x800000400, 0x800000200, 0x800000100, 0x800000080, 0x800000040, 
            0x800000020, 0x800000010, 0x800000008, 0x800000004, 0x800000002, 
            0x800000001, 0x600000000, 0x500000000, 0x480000000, 0x440000000, 
            0x420000000, 0x410000000, 0x408000000, 0x404000000, 0x402000000, 
            0x401000000, 0x400800000, 0x400400000, 0x400200000, 0x400100000, 
            0x400080000, 0x400040000, 0x400020000, 0x400010000, 0x400008000, 
            0x400004000, 0x400002000, 0x400001000, 0x400000800, 0x400000400, 
            0x400000200, 0x400000100, 0x400000080, 0x400000040, 0x400000020, 
            0x400000010, 0x400000008, 0x400000004, 0x400000002, 0x400000001, 
            0x300000000, 0x280000000, 0x240000000, 0x220000000, 0x210000000, 
            0x208000000, 0x204000000, 0x202000000, 0x201000000, 0x200800000, 
            0x200400000, 0x200200000, 0x200100000, 0x200080000, 0x200040000, 
            0x200020000, 0x200010000, 0x200008000, 0x200004000, 0x200002000, 
            0x200001000, 0x200000800, 0x200000400, 0x200000200, 0x200000100, 
            0x200000080, 0x200000040, 0x200000020, 0x200000010, 0x200000008, 
            0x200000004, 0x200000002, 0x200000001, 0x180000000, 0x140000000, 
            0x120000000, 0x110000000, 0x108000000, 0x104000000, 0x102000000, 
            0x101000000, 0x100800000, 0x100400000, 0x100200000, 0x100100000, 
            0x100080000, 0x100040000, 0x100020000, 0x100010000, 0x100008000, 
            0x100004000, 0x100002000, 0x100001000, 0x100000800, 0x100000400, 
            0x100000200, 0x100000100, 0x100000080, 0x100000040, 0x100000020, 
            0x100000010, 0x100000008, 0x100000004, 0x100000002, 0x100000001, 
            0xc0000000, 0xa0000000, 0x90000000, 0x88000000, 0x84000000, 
            0x82000000, 0x81000000, 0x80800000, 0x80400000, 0x80200000, 
            0x80100000, 0x80080000, 0x80040000, 0x80020000, 0x80010000, 
            0x80008000, 0x80004000, 0x80002000, 0x80001000, 0x80000800, 
            0x80000400, 0x80000200, 0x80000100, 0x80000080, 0x80000040, 
            0x80000020, 0x80000010, 0x80000008, 0x80000004, 0x80000002, 
            0x80000001, 0x60000000, 0x50000000, 0x48000000, 0x44000000, 
            0x42000000, 0x41000000, 0x40800000, 0x40400000, 0x40200000, 
            0x40100000, 0x40080000, 0x40040000, 0x40020000, 0x40010000, 
            0x40008000, 0x40004000, 0x40002000, 0x40001000, 0x40000800, 
            0x40000400, 0x40000200, 0x40000100, 0x40000080, 0x40000040, 
            0x40000020, 0x40000010, 0x40000008, 0x40000004, 0x40000002, 
            0x40000001, 0x30000000, 0x28000000, 0x24000000, 0x22000000, 
            0x21000000, 0x20800000, 0x20400000, 0x20200000, 0x20100000, 
            0x20080000, 0x20040000, 0x20020000, 0x20010000, 0x20008000, 
            0x20004000, 0x20002000, 0x20001000, 0x20000800, 0x20000400, 
            0x20000200, 0x20000100, 0x20000080, 0x20000040, 0x20000020, 
            0x20000010, 0x20000008, 0x20000004, 0x20000002, 0x20000001, 
            0x18000000, 0x14000000, 0x12000000, 0x11000000, 0x10800000, 
            0x10400000, 0x10200000, 0x10100000, 0x10080000, 0x10040000, 
            0x10020000, 0x10010000, 0x10008000, 0x10004000, 0x10002000, 
            0x10001000, 0x10000800, 0x10000400, 0x10000200, 0x10000100, 
            0x10000080, 0x10000040, 0x10000020, 0x10000010, 0x10000008, 
            0x10000004, 0x10000002, 0x10000001, 0xc000000, 0xa000000, 
            0x9000000, 0x8800000, 0x8400000, 0x8200000, 0x8100000, 
            0x8080000, 0x8040000, 0x8020000, 0x8010000, 0x8008000, 
            0x8004000, 0x8002000, 0x8001000, 0x8000800, 0x8000400, 
            0x8000200, 0x8000100, 0x8000080, 0x8000040, 0x8000020, 
            0x8000010, 0x8000008, 0x8000004, 0x8000002, 0x8000001, 
            0x6000000, 0x5000000, 0x4800000, 0x4400000, 0x4200000, 
            0x4100000, 0x4080000, 0x4040000, 0x4020000, 0x4010000, 
            0x4008000, 0x4004000, 0x4002000, 0x4001000, 0x4000800, 
            0x4000400, 0x4000200, 0x4000100, 0x4000080, 0x4000040, 
            0x4000020, 0x4000010, 0x4000008, 0x4000004, 0x4000002, 
            0x4000001, 0x3000000, 0x2800000, 0x2400000, 0x2200000, 
            0x2100000, 0x2080000, 0x2040000, 0x2020000, 0x2010000, 
            0x2008000, 0x2004000, 0x2002000, 0x2001000, 0x2000800, 
            0x2000400, 0x2000200, 0x2000100, 0x2000080, 0x2000040, 
            0x2000020, 0x2000010, 0x2000008, 0x2000004, 0x2000002, 
            0x2000001, 0x1800000, 0x1400000, 0x1200000, 0x1100000, 
            0x1080000, 0x1040000, 0x1020000, 0x1010000, 0x1008000, 
            0x1004000, 0x1002000, 0x1001000, 0x1000800, 0x1000400, 
            0x1000200, 0x1000100, 0x1000080, 0x1000040, 0x1000020, 
            0x1000010, 0x1000008, 0x1000004, 0x1000002, 0x1000001, 
            0xc00000, 0xa00000, 0x900000, 0x880000, 0x840000, 
            0x820000, 0x810000, 0x808000, 0x804000, 0x802000, 
            0x801000, 0x800800, 0x800400, 0x800200, 0x800100, 
            0x800080, 0x800040, 0x800020, 0x800010, 0x800008, 
            0x800004, 0x800002, 0x800001, 0x600000, 0x500000, 
            0x480000, 0x440000, 0x420000, 0x410000, 0x408000, 
            0x404000, 0x402000, 0x401000, 0x400800, 0x400400, 
            0x400200, 0x400100, 0x400080, 0x400040, 0x400020, 
            0x400010, 0x400008, 0x400004, 0x400002, 0x400001, 
            0x300000, 0x280000, 0x240000, 0x220000, 0x210000, 
            0x208000, 0x204000, 0x202000, 0x201000, 0x200800, 
            0x200400, 0x200200, 0x200100, 0x200080, 0x200040, 
            0x200020, 0x200010, 0x200008, 0x200004, 0x200002, 
            0x200001, 0x180000, 0x140000, 0x120000, 0x110000, 
            0x108000, 0x104000, 0x102000, 0x101000, 0x100800, 
            0x100400, 0x100200, 0x100100, 0x100080, 0x100040, 
            0x100020, 0x100010, 0x100008, 0x100004, 0x100002, 
            0x100001, 0xc0000, 0xa0000, 0x90000, 0x88000, 
            0x84000, 0x82000, 0x81000, 0x80800, 0x80400, 
            0x80200, 0x80100, 0x80080, 0x80040, 0x80020, 
            0x80010, 0x80008, 0x80004, 0x80002, 0x80001, 
            0x60000, 0x50000, 0x48000, 0x44000, 0x42000, 
            0x41000, 0x40800, 0x40400, 0x40200, 0x40100, 
            0x40080, 0x40040, 0x40020, 0x40010, 0x40008, 
            0x40004, 0x40002, 0x40001, 0x30000, 0x28000, 
            0x24000, 0x22000, 0x21000, 0x20800, 0x20400, 
            0x20200, 0x20100, 0x20080, 0x20040, 0x20020, 
            0x20010, 0x20008, 0x20004, 0x20002, 0x20001, 
            0x18000, 0x14000, 0x12000, 0x11000, 0x10800, 
            0x10400, 0x10200, 0x10100, 0x10080, 0x10040, 
            0x10020, 0x10010, 0x10008, 0x10004, 0x10002, 
            0x10001, 0xc000, 0xa000, 0x9000, 0x8800, 
            0x8400, 0x8200, 0x8100, 0x8080, 0x8040, 
            0x8020, 0x8010, 0x8008, 0x8004, 0x8002, 
            0x8001, 0x6000, 0x5000, 0x4800, 0x4400, 
            0x4200, 0x4100, 0x4080, 0x4040, 0x4020, 
            0x4010, 0x4008, 0x4004, 0x4002, 0x4001, 
            0x3000, 0x2800, 0x2400, 0x2200, 0x2100, 
            0x2080, 0x2040, 0x2020, 0x2010, 0x2008, 
            0x2004, 0x2002, 0x2001, 0x1800, 0x1400, 
            0x1200, 0x1100, 0x1080, 0x1040, 0x1020, 
            0x1010, 0x1008, 0x1004, 0x1002, 0x1001, 
            0xc00, 0xa00, 0x900, 0x880, 0x840, 
            0x820, 0x810, 0x808, 0x804, 0x802, 
            0x801, 0x600, 0x500, 0x480, 0x440, 
            0x420, 0x410, 0x408, 0x404, 0x402, 
            0x401, 0x300, 0x280, 0x240, 0x220, 
            0x210, 0x208, 0x204, 0x202, 0x201, 
            0x180, 0x140, 0x120, 0x110, 0x108, 
            0x104, 0x102, 0x101, 0xc0, 0xa0, 
            0x90, 0x88, 0x84, 0x82, 0x81, 
            0x60, 0x50, 0x48, 0x44, 0x42, 
            0x41, 0x30, 0x28, 0x24, 0x22, 
            0x21, 0x18, 0x14, 0x12, 0x11, 
            0xc, 0xa, 0x9, 0x6, 0x5, 
            0x3
    ]

    TwoCardMaskTableSize = len(TwoCardMaskTable)

    # The 1326 possible pocket cards ordered by the 169 unique holdem combinations. The
    # index is equivalent to the number value of Hand.POCKET_PairType.

    Pocket169Table = [
        [0x8004000000000, 0x8000002000000, 0x8000000001000, 0x4002000000, 0x4000001000, 0x2001000],
        [0x4002000000000, 0x4000001000000, 0x4000000000800, 0x2001000000, 0x2000000800, 0x1000800],
	    [0x2001000000000, 0x2000000800000, 0x2000000000400, 0x1000800000, 0x1000000400, 0x800400],
	    [0x1000800000000, 0x1000000400000, 0x1000000000200, 0x800400000, 0x800000200, 0x400200],
	    [0x800400000000, 0x800000200000, 0x800000000100, 0x400200000, 0x400000100, 0x200100],
	    [0x400200000000, 0x400000100000, 0x400000000080, 0x200100000, 0x200000080, 0x100080],
	    [0x200100000000, 0x200000080000, 0x200000000040, 0x100080000, 0x100000040, 0x80040],
	    [0x100080000000, 0x100000040000, 0x100000000020, 0x80040000, 0x80000020, 0x40020],
	    [0x80040000000, 0x80000020000, 0x80000000010, 0x40020000, 0x40000010, 0x20010],
	    [0x40020000000, 0x40000010000, 0x40000000008, 0x20010000, 0x20000008, 0x10008],
	    [0x20010000000, 0x20000008000, 0x20000000004, 0x10008000, 0x10000004, 0x8004],
	    [0x10008000000, 0x10000004000, 0x10000000002, 0x8004000, 0x8000002, 0x4002],
	    [0x8004000000, 0x8000002000, 0x8000000001, 0x4002000, 0x4000001, 0x2001],
	    [0xC000000000000, 0x6000000000, 0x3000000, 0x1800],
	    [0x8002000000000, 0x8000001000000, 0x8000000000800, 0x4004000000000, 0x4000002000000, 0x4000000001000, 0x4001000000, 0x4000000800, 0x2002000000, 0x2000001000, 0x2000800, 0x1001000],
	    [0xA000000000000, 0x5000000000, 0x2800000, 0x1400],
	    [0x8001000000000, 0x8000000800000, 0x8000000000400, 0x2004000000000, 0x2000002000000, 0x2000000001000, 0x4000800000, 0x4000000400, 0x1002000000, 0x1000001000, 0x2000400, 0x801000],
	    [0x9000000000000, 0x4800000000, 0x2400000, 0x1200],
	    [0x8000800000000, 0x8000000400000, 0x8000000000200, 0x1004000000000, 0x1000002000000, 0x1000000001000, 0x4000400000, 0x4000000200, 0x802000000, 0x800001000, 0x2000200, 0x401000],
	    [0x8800000000000, 0x4400000000, 0x2200000, 0x1100],
	    [0x8000400000000, 0x8000000200000, 0x8000000000100, 0x804000000000, 0x800002000000, 0x800000001000, 0x4000200000, 0x4000000100, 0x402000000, 0x400001000, 0x2000100, 0x201000],
	    [0x8400000000000, 0x4200000000, 0x2100000, 0x1080],
	    [0x8000200000000, 0x8000000100000, 0x8000000000080, 0x404000000000, 0x400002000000, 0x400000001000, 0x4000100000, 0x4000000080, 0x202000000, 0x200001000, 0x2000080, 0x101000],
	    [0x8200000000000, 0x4100000000, 0x2080000, 0x1040],
	    [0x8000100000000, 0x8000000080000, 0x8000000000040, 0x204000000000, 0x200002000000, 0x200000001000, 0x4000080000, 0x4000000040, 0x102000000, 0x100001000, 0x2000040, 0x81000],
	    [0x8100000000000, 0x4080000000, 0x2040000, 0x1020],
	    [0x8000080000000, 0x8000000040000, 0x8000000000020, 0x104000000000, 0x100002000000, 0x100000001000, 0x4000040000, 0x4000000020, 0x82000000, 0x80001000, 0x2000020, 0x41000],
	    [0x8080000000000, 0x4040000000, 0x2020000, 0x1010],
	    [0x8000040000000, 0x8000000020000, 0x8000000000010, 0x84000000000, 0x80002000000, 0x80000001000, 0x4000020000, 0x4000000010, 0x42000000, 0x40001000, 0x2000010, 0x21000],
	    [0x8040000000000, 0x4020000000, 0x2010000, 0x1008],
	    [0x8000020000000, 0x8000000010000, 0x8000000000008, 0x44000000000, 0x40002000000, 0x40000001000, 0x4000010000, 0x4000000008, 0x22000000, 0x20001000, 0x2000008, 0x11000],
	    [0x8020000000000, 0x4010000000, 0x2008000, 0x1004],
	    [0x8000010000000, 0x8000000008000, 0x8000000000004, 0x24000000000, 0x20002000000, 0x20000001000, 0x4000008000, 0x4000000004, 0x12000000, 0x10001000, 0x2000004, 0x9000],
	    [0x8010000000000, 0x4008000000, 0x2004000, 0x1002],
	    [0x8000008000000, 0x8000000004000, 0x8000000000002, 0x14000000000, 0x10002000000, 0x10000001000, 0x4000004000, 0x4000000002, 0xA000000, 0x8001000, 0x2000002, 0x5000],
	    [0x8008000000000, 0x4004000000, 0x2002000, 0x1001],
	    [0x8000004000000, 0x8000000002000, 0x8000000000001, 0xC000000000, 0x8002000000, 0x8000001000, 0x4000002000, 0x4000000001, 0x6000000, 0x4001000, 0x2000001, 0x3000],
	    [0x6000000000000, 0x3000000000, 0x1800000, 0xC00],
	    [0x4001000000000, 0x4000000800000, 0x4000000000400, 0x2002000000000, 0x2000001000000, 0x2000000000800, 0x2000800000, 0x2000000400, 0x1001000000, 0x1000000800, 0x1000400, 0x800800],
	    [0x5000000000000, 0x2800000000, 0x1400000, 0xA00],
	    [0x4000800000000, 0x4000000400000, 0x4000000000200, 0x1002000000000, 0x1000001000000, 0x1000000000800, 0x2000400000, 0x2000000200, 0x801000000, 0x800000800, 0x1000200, 0x400800],
	    [0x4800000000000, 0x2400000000, 0x1200000, 0x900],
	    [0x4000400000000, 0x4000000200000, 0x4000000000100, 0x802000000000, 0x800001000000, 0x800000000800, 0x2000200000, 0x2000000100, 0x401000000, 0x400000800, 0x1000100, 0x200800],
	    [0x4400000000000, 0x2200000000, 0x1100000, 0x880],
	    [0x4000200000000, 0x4000000100000, 0x4000000000080, 0x402000000000, 0x400001000000, 0x400000000800, 0x2000100000, 0x2000000080, 0x201000000, 0x200000800, 0x1000080, 0x100800],
	    [0x4200000000000, 0x2100000000, 0x1080000, 0x840],
	    [0x4000100000000, 0x4000000080000, 0x4000000000040, 0x202000000000, 0x200001000000, 0x200000000800, 0x2000080000, 0x2000000040, 0x101000000, 0x100000800, 0x1000040, 0x80800],
	    [0x4100000000000, 0x2080000000, 0x1040000, 0x820],
	    [0x4000080000000, 0x4000000040000, 0x4000000000020, 0x102000000000, 0x100001000000, 0x100000000800, 0x2000040000, 0x2000000020, 0x81000000, 0x80000800, 0x1000020, 0x40800],
	    [0x4080000000000, 0x2040000000, 0x1020000, 0x810],
	    [0x4000040000000, 0x4000000020000, 0x4000000000010, 0x82000000000, 0x80001000000, 0x80000000800, 0x2000020000, 0x2000000010, 0x41000000, 0x40000800, 0x1000010, 0x20800],
	    [0x4040000000000, 0x2020000000, 0x1010000, 0x808],
	    [0x4000020000000, 0x4000000010000, 0x4000000000008, 0x42000000000, 0x40001000000, 0x40000000800, 0x2000010000, 0x2000000008, 0x21000000, 0x20000800, 0x1000008, 0x10800],
	    [0x4020000000000, 0x2010000000, 0x1008000, 0x804],
	    [0x4000010000000, 0x4000000008000, 0x4000000000004, 0x22000000000, 0x20001000000, 0x20000000800, 0x2000008000, 0x2000000004, 0x11000000, 0x10000800, 0x1000004, 0x8800],
	    [0x4010000000000, 0x2008000000, 0x1004000, 0x802],
	    [0x4000008000000, 0x4000000004000, 0x4000000000002, 0x12000000000, 0x10001000000, 0x10000000800, 0x2000004000, 0x2000000002, 0x9000000, 0x8000800, 0x1000002, 0x4800],
	    [0x4008000000000, 0x2004000000, 0x1002000, 0x801],
	    [0x4000004000000, 0x4000000002000, 0x4000000000001, 0xA000000000, 0x8001000000, 0x8000000800, 0x2000002000, 0x2000000001, 0x5000000, 0x4000800, 0x1000001, 0x2800],
	    [0x3000000000000, 0x1800000000, 0xC00000, 0x600],
	    [0x2000800000000, 0x2000000400000, 0x2000000000200, 0x1001000000000, 0x1000000800000, 0x1000000000400, 0x1000400000, 0x1000000200, 0x800800000, 0x800000400, 0x800200, 0x400400],
	    [0x2800000000000, 0x1400000000, 0xA00000, 0x500],
	    [0x2000400000000, 0x2000000200000, 0x2000000000100, 0x801000000000, 0x800000800000, 0x800000000400, 0x1000200000, 0x1000000100, 0x400800000, 0x400000400, 0x800100, 0x200400],
	    [0x2400000000000, 0x1200000000, 0x900000, 0x480],
	    [0x2000200000000, 0x2000000100000, 0x2000000000080, 0x401000000000, 0x400000800000, 0x400000000400, 0x1000100000, 0x1000000080, 0x200800000, 0x200000400, 0x800080, 0x100400],
	    [0x2200000000000, 0x1100000000, 0x880000, 0x440],
	    [0x2000100000000, 0x2000000080000, 0x2000000000040, 0x201000000000, 0x200000800000, 0x200000000400, 0x1000080000, 0x1000000040, 0x100800000, 0x100000400, 0x800040, 0x80400],
	    [0x2100000000000, 0x1080000000, 0x840000, 0x420],
	    [0x2000080000000, 0x2000000040000, 0x2000000000020, 0x101000000000, 0x100000800000, 0x100000000400, 0x1000040000, 0x1000000020, 0x80800000, 0x80000400, 0x800020, 0x40400],
	    [0x2080000000000, 0x1040000000, 0x820000, 0x410],
	    [0x2000040000000, 0x2000000020000, 0x2000000000010, 0x81000000000, 0x80000800000, 0x80000000400, 0x1000020000, 0x1000000010, 0x40800000, 0x40000400, 0x800010, 0x20400],
	    [0x2040000000000, 0x1020000000, 0x810000, 0x408],
	    [0x2000020000000, 0x2000000010000, 0x2000000000008, 0x41000000000, 0x40000800000, 0x40000000400, 0x1000010000, 0x1000000008, 0x20800000, 0x20000400, 0x800008, 0x10400],
	    [0x2020000000000, 0x1010000000, 0x808000, 0x404],
	    [0x2000010000000, 0x2000000008000, 0x2000000000004, 0x21000000000, 0x20000800000, 0x20000000400, 0x1000008000, 0x1000000004, 0x10800000, 0x10000400, 0x800004, 0x8400],
	    [0x2010000000000, 0x1008000000, 0x804000, 0x402],
	    [0x2000008000000, 0x2000000004000, 0x2000000000002, 0x11000000000, 0x10000800000, 0x10000000400, 0x1000004000, 0x1000000002, 0x8800000, 0x8000400, 0x800002, 0x4400],
	    [0x2008000000000, 0x1004000000, 0x802000, 0x401],
	    [0x2000004000000, 0x2000000002000, 0x2000000000001, 0x9000000000, 0x8000800000, 0x8000000400, 0x1000002000, 0x1000000001, 0x4800000, 0x4000400, 0x800001, 0x2400],
	    [0x1800000000000, 0xC00000000, 0x600000, 0x300],
	    [0x1000400000000, 0x1000000200000, 0x1000000000100, 0x800800000000, 0x800000400000, 0x800000000200, 0x800200000, 0x800000100, 0x400400000, 0x400000200, 0x400100, 0x200200],
	    [0x1400000000000, 0xA00000000, 0x500000, 0x280],
	    [0x1000200000000, 0x1000000100000, 0x1000000000080, 0x400800000000, 0x400000400000, 0x400000000200, 0x800100000, 0x800000080, 0x200400000, 0x200000200, 0x400080, 0x100200],
	    [0x1200000000000, 0x900000000, 0x480000, 0x240],
	    [0x1000100000000, 0x1000000080000, 0x1000000000040, 0x200800000000, 0x200000400000, 0x200000000200, 0x800080000, 0x800000040, 0x100400000, 0x100000200, 0x400040, 0x80200],
	    [0x1100000000000, 0x880000000, 0x440000, 0x220],
	    [0x1000080000000, 0x1000000040000, 0x1000000000020, 0x100800000000, 0x100000400000, 0x100000000200, 0x800040000, 0x800000020, 0x80400000, 0x80000200, 0x400020, 0x40200],
	    [0x1080000000000, 0x840000000, 0x420000, 0x210],
	    [0x1000040000000, 0x1000000020000, 0x1000000000010, 0x80800000000, 0x80000400000, 0x80000000200, 0x800020000, 0x800000010, 0x40400000, 0x40000200, 0x400010, 0x20200],
	    [0x1040000000000, 0x820000000, 0x410000, 0x208],
	    [0x1000020000000, 0x1000000010000, 0x1000000000008, 0x40800000000, 0x40000400000, 0x40000000200, 0x800010000, 0x800000008, 0x20400000, 0x20000200, 0x400008, 0x10200],
	    [0x1020000000000, 0x810000000, 0x408000, 0x204],
	    [0x1000010000000, 0x1000000008000, 0x1000000000004, 0x20800000000, 0x20000400000, 0x20000000200, 0x800008000, 0x800000004, 0x10400000, 0x10000200, 0x400004, 0x8200],
	    [0x1010000000000, 0x808000000, 0x404000, 0x202],
	    [0x1000008000000, 0x1000000004000, 0x1000000000002, 0x10800000000, 0x10000400000, 0x10000000200, 0x800004000, 0x800000002, 0x8400000, 0x8000200, 0x400002, 0x4200],
	    [0x1008000000000, 0x804000000, 0x402000, 0x201],
	    [0x1000004000000, 0x1000000002000, 0x1000000000001, 0x8800000000, 0x8000400000, 0x8000000200, 0x800002000, 0x800000001, 0x4400000, 0x4000200, 0x400001, 0x2200],
	    [0xC00000000000, 0x600000000, 0x300000, 0x180],
	    [0x800200000000, 0x800000100000, 0x800000000080, 0x400400000000, 0x400000200000, 0x400000000100, 0x400100000, 0x400000080, 0x200200000, 0x200000100, 0x200080, 0x100100],
	    [0xA00000000000, 0x500000000, 0x280000, 0x140],
	    [0x800100000000, 0x800000080000, 0x800000000040, 0x200400000000, 0x200000200000, 0x200000000100, 0x400080000, 0x400000040, 0x100200000, 0x100000100, 0x200040, 0x80100],
	    [0x900000000000, 0x480000000, 0x240000, 0x120],
	    [0x800080000000, 0x800000040000, 0x800000000020, 0x100400000000, 0x100000200000, 0x100000000100, 0x400040000, 0x400000020, 0x80200000, 0x80000100, 0x200020, 0x40100],
	    [0x880000000000, 0x440000000, 0x220000, 0x110],
	    [0x800040000000, 0x800000020000, 0x800000000010, 0x80400000000, 0x80000200000, 0x80000000100, 0x400020000, 0x400000010, 0x40200000, 0x40000100, 0x200010, 0x20100],
	    [0x840000000000, 0x420000000, 0x210000, 0x108],
	    [0x800020000000, 0x800000010000, 0x800000000008, 0x40400000000, 0x40000200000, 0x40000000100, 0x400010000, 0x400000008, 0x20200000, 0x20000100, 0x200008, 0x10100],
	    [0x820000000000, 0x410000000, 0x208000, 0x104],
	    [0x800010000000, 0x800000008000, 0x800000000004, 0x20400000000, 0x20000200000, 0x20000000100, 0x400008000, 0x400000004, 0x10200000, 0x10000100, 0x200004, 0x8100],
	    [0x810000000000, 0x408000000, 0x204000, 0x102],
	    [0x800008000000, 0x800000004000, 0x800000000002, 0x10400000000, 0x10000200000, 0x10000000100, 0x400004000, 0x400000002, 0x8200000, 0x8000100, 0x200002, 0x4100],
	    [0x808000000000, 0x404000000, 0x202000, 0x101],
	    [0x800004000000, 0x800000002000, 0x800000000001, 0x8400000000, 0x8000200000, 0x8000000100, 0x400002000, 0x400000001, 0x4200000, 0x4000100, 0x200001, 0x2100],
	    [0x600000000000, 0x300000000, 0x180000, 0xC0],
	    [0x400100000000, 0x400000080000, 0x400000000040, 0x200200000000, 0x200000100000, 0x200000000080, 0x200080000, 0x200000040, 0x100100000, 0x100000080, 0x100040, 0x80080],
	    [0x500000000000, 0x280000000, 0x140000, 0xA0],
	    [0x400080000000, 0x400000040000, 0x400000000020, 0x100200000000, 0x100000100000, 0x100000000080, 0x200040000, 0x200000020, 0x80100000, 0x80000080, 0x100020, 0x40080],
	    [0x480000000000, 0x240000000, 0x120000, 0x90],
	    [0x400040000000, 0x400000020000, 0x400000000010, 0x80200000000, 0x80000100000, 0x80000000080, 0x200020000, 0x200000010, 0x40100000, 0x40000080, 0x100010, 0x20080],
	    [0x440000000000, 0x220000000, 0x110000, 0x88],
	    [0x400020000000, 0x400000010000, 0x400000000008, 0x40200000000, 0x40000100000, 0x40000000080, 0x200010000, 0x200000008, 0x20100000, 0x20000080, 0x100008, 0x10080],
	    [0x420000000000, 0x210000000, 0x108000, 0x84],
	    [0x400010000000, 0x400000008000, 0x400000000004, 0x20200000000, 0x20000100000, 0x20000000080, 0x200008000, 0x200000004, 0x10100000, 0x10000080, 0x100004, 0x8080],
	    [0x410000000000, 0x208000000, 0x104000, 0x82],
	    [0x400008000000, 0x400000004000, 0x400000000002, 0x10200000000, 0x10000100000, 0x10000000080, 0x200004000, 0x200000002, 0x8100000, 0x8000080, 0x100002, 0x4080],
	    [0x408000000000, 0x204000000, 0x102000, 0x81],
	    [0x400004000000, 0x400000002000, 0x400000000001, 0x8200000000, 0x8000100000, 0x8000000080, 0x200002000, 0x200000001, 0x4100000, 0x4000080, 0x100001, 0x2080],
	    [0x300000000000, 0x180000000, 0xC0000, 0x60],
	    [0x200080000000, 0x200000040000, 0x200000000020, 0x100100000000, 0x100000080000, 0x100000000040, 0x100040000, 0x100000020, 0x80080000, 0x80000040, 0x80020, 0x40040],
	    [0x280000000000, 0x140000000, 0xA0000, 0x50],
	    [0x200040000000, 0x200000020000, 0x200000000010, 0x80100000000, 0x80000080000, 0x80000000040, 0x100020000, 0x100000010, 0x40080000, 0x40000040, 0x80010, 0x20040],
	    [0x240000000000, 0x120000000, 0x90000, 0x48],
	    [0x200020000000, 0x200000010000, 0x200000000008, 0x40100000000, 0x40000080000, 0x40000000040, 0x100010000, 0x100000008, 0x20080000, 0x20000040, 0x80008, 0x10040],
	    [0x220000000000, 0x110000000, 0x88000, 0x44],
	    [0x200010000000, 0x200000008000, 0x200000000004, 0x20100000000, 0x20000080000, 0x20000000040, 0x100008000, 0x100000004, 0x10080000, 0x10000040, 0x80004, 0x8040],
	    [0x210000000000, 0x108000000, 0x84000, 0x42],
	    [0x200008000000, 0x200000004000, 0x200000000002, 0x10100000000, 0x10000080000, 0x10000000040, 0x100004000, 0x100000002, 0x8080000, 0x8000040, 0x80002, 0x4040],
	    [0x208000000000, 0x104000000, 0x82000, 0x41],
	    [0x200004000000, 0x200000002000, 0x200000000001, 0x8100000000, 0x8000080000, 0x8000000040, 0x100002000, 0x100000001, 0x4080000, 0x4000040, 0x80001, 0x2040],
	    [0x180000000000, 0xC0000000, 0x60000, 0x30],
	    [0x100040000000, 0x100000020000, 0x100000000010, 0x80080000000, 0x80000040000, 0x80000000020, 0x80020000, 0x80000010, 0x40040000, 0x40000020, 0x40010, 0x20020],
	    [0x140000000000, 0xA0000000, 0x50000, 0x28],
	    [0x100020000000, 0x100000010000, 0x100000000008, 0x40080000000, 0x40000040000, 0x40000000020, 0x80010000, 0x80000008, 0x20040000, 0x20000020, 0x40008, 0x10020],
	    [0x120000000000, 0x90000000, 0x48000, 0x24],
	    [0x100010000000, 0x100000008000, 0x100000000004, 0x20080000000, 0x20000040000, 0x20000000020, 0x80008000, 0x80000004, 0x10040000, 0x10000020, 0x40004, 0x8020],
	    [0x110000000000, 0x88000000, 0x44000, 0x22],
	    [0x100008000000, 0x100000004000, 0x100000000002, 0x10080000000, 0x10000040000, 0x10000000020, 0x80004000, 0x80000002, 0x8040000, 0x8000020, 0x40002, 0x4020],
	    [0x108000000000, 0x84000000, 0x42000, 0x21],
	    [0x100004000000, 0x100000002000, 0x100000000001, 0x8080000000, 0x8000040000, 0x8000000020, 0x80002000, 0x80000001, 0x4040000, 0x4000020, 0x40001, 0x2020],
	    [0xC0000000000, 0x60000000, 0x30000, 0x18],
	    [0x80020000000, 0x80000010000, 0x80000000008, 0x40040000000, 0x40000020000, 0x40000000010, 0x40010000, 0x40000008, 0x20020000, 0x20000010, 0x20008, 0x10010],
	    [0xA0000000000, 0x50000000, 0x28000, 0x14],
	    [0x80010000000, 0x80000008000, 0x80000000004, 0x20040000000, 0x20000020000, 0x20000000010, 0x40008000, 0x40000004, 0x10020000, 0x10000010, 0x20004, 0x8010],
	    [0x90000000000, 0x48000000, 0x24000, 0x12],
	    [0x80008000000, 0x80000004000, 0x80000000002, 0x10040000000, 0x10000020000, 0x10000000010, 0x40004000, 0x40000002, 0x8020000, 0x8000010, 0x20002, 0x4010],
	    [0x88000000000, 0x44000000, 0x22000, 0x11],
	    [0x80004000000, 0x80000002000, 0x80000000001, 0x8040000000, 0x8000020000, 0x8000000010, 0x40002000, 0x40000001, 0x4020000, 0x4000010, 0x20001, 0x2010],
	    [0x60000000000, 0x30000000, 0x18000, 0xC],
	    [0x40010000000, 0x40000008000, 0x40000000004, 0x20020000000, 0x20000010000, 0x20000000008, 0x20008000, 0x20000004, 0x10010000, 0x10000008, 0x10004, 0x8008],
	    [0x50000000000, 0x28000000, 0x14000, 0xA],
	    [0x40008000000, 0x40000004000, 0x40000000002, 0x10020000000, 0x10000010000, 0x10000000008, 0x20004000, 0x20000002, 0x8010000, 0x8000008, 0x10002, 0x4008],
	    [0x48000000000, 0x24000000, 0x12000, 0x9],
	    [0x40004000000, 0x40000002000, 0x40000000001, 0x8020000000, 0x8000010000, 0x8000000008, 0x20002000, 0x20000001, 0x4010000, 0x4000008, 0x10001, 0x2008],
	    [0x30000000000, 0x18000000, 0xC000, 0x6],
	    [0x20008000000, 0x20000004000, 0x20000000002, 0x10010000000, 0x10000008000, 0x10000000004, 0x10004000, 0x10000002, 0x8008000, 0x8000004, 0x8002, 0x4004],
	    [0x28000000000, 0x14000000, 0xA000, 0x5],
	    [0x20004000000, 0x20000002000, 0x20000000001, 0x8010000000, 0x8000008000, 0x8000000004, 0x10002000, 0x10000001, 0x4008000, 0x4000004, 0x8001, 0x2004],
	    [0x18000000000, 0xC000000, 0x6000, 0x3],
	    [0x10004000000, 0x10000002000, 0x10000000001, 0x8008000000, 0x8000004000, 0x8000000002, 0x8002000, 0x8000001, 0x4004000, 0x4000002, 0x4001, 0x2002]
    ]

    class PocketHand169(Enum):
        # Not a POCKET_Hand169
        NONE = -1

        # Represents a pair of Aces (POCKET_ Rockets)
        POCKET_AA = 0

        # Represents a pair of Kings (Cowboys)
        POCKET_KK = 1
        
        # Represents a pair of Queens (Ladies)
        POCKET_QQ = 2

        # Represents a pair of Jacks (Fish hooks)
        POCKET_JJ = 3

        # Represents a pair of Tens (Rin Tin Tin)
        POCKET_TT = 4

        # Represents a pair of Nines (Gretzky)
        POCKET_99 = 5

        # Represents a pair of Eights (Snowmen)
        POCKET_88 = 6

        # Represents a pair of Sevens (Hockey Sticks)
        POCKET_77 = 7

        # Represents a pair of Sixes (Route 66)
        POCKET_66 = 8

        # Represents a pair of Fives (Speed Limit)
        POCKET_55 = 9

        # Represents a pair of Fours (Sailboats)
        POCKET_44 = 10

        # Represents a pair of Threes (Crabs)
        POCKET_33 = 11

        # Represents a pair of Twos (Ducks)
        POCKET_22 = 12

        # Represents Ace/King Suited (Big Slick)
        POCKET_AKS = 13

        # Represents Ace/King offsuit (Big Slick)
        POCKET_AKO = 14

        # Represents Ace/Queen suited (Little Slick)
        POCKET_AQS = 15

        # Represents Ace/Queen suited (Little Slick)
        POCKET_AQO = 16

        # Represents Ace/Jack suited (Blackjack)
        POCKET_AJS = 17

        # Represents Ace/Jack offsuit (Blackjack)
        POCKET_AJO = 18

        # RepresentsAce/Ten suited (Johnny Moss)
        POCKET_ATS = 19

        # Represents Ace/Ten offsuit (Johnny Moss)
        POCKET_ATO = 20

        # Represents Ace/Nine suited
        POCKET_A9S = 21
    
        POCKET_A9O = 22

        POCKET_A8S = 23

        POCKET_A8O = 24

        POCKET_A7S = 25

        POCKET_A7O = 26

        POCKET_A6S = 27
        # Represents Ace/Six offsuit
        POCKET_A6O = 28
        # Represents Ace/Five suited
        POCKET_A5S = 29
        # Represents Ace/Five offsuit
        POCKET_A5O = 30
        # Represents Ace/Four suited
        POCKET_A4S = 31
        # Represents Ace/Four offsuit
        POCKET_A4O = 32
        # Represents Ace/Three suited
        POCKET_A3S = 33
        # Represents Ace/Three offsuit
        POCKET_A3O = 34
        # Represents Ace/Two suited
        POCKET_A2S = 35
        # Represents Ace/Two offsuit
        POCKET_A2O = 36
        # Represents King/Queen suited
        POCKET_KQS = 37
        # Represents King/Queen offsuit
        POCKET_KQO = 38
        # Represents King/Jack suited
        POCKET_KJS = 39
        # Represents King/Jack offsuit
        POCKET_KJO = 40
        # Represents King/Ten suited
        POCKET_KTS = 41
        # Represents King/Ten offsuit
        POCKET_KTO = 42
        # Represents King/Nine suited
        POCKET_K9S = 43
        # Represents King/Nine offsuit
        POCKET_K9O = 44
        # Represents King/Eight suited
        POCKET_K8S = 45
        # Represents King/Eight offsuit
        POCKET_K8O = 46
        # Represents King/Seven suited
        POCKET_K7S = 47
        # Represents King/Seven offsuit
        POCKET_K7O = 48
        # Represents King/Six suited
        POCKET_K6S = 49
        # Represents King/Six offsuit
        POCKET_K6O = 50
        # Represents King/Five suited
        POCKET_K5S = 51
        # Represents King/Five offsuit
        POCKET_K5O = 52
        # Represents King/Four suited
        POCKET_K4S = 53
        # Represents King/Four offsuit
        POCKET_K4O = 54
        # Represents King/Three suited
        POCKET_K3S = 55
        # Represents King/Three offsuit
        POCKET_K3O = 56
        # Represents King/Two suited
        POCKET_K2S = 57
        # Represents King/Two offsuit
        POCKET_K2O = 58
        # Represents Queen/Jack suited
        POCKET_QJS = 59
        # Represents Queen/Jack offsuit
        POCKET_QJO = 60
        # Represents Queen/Ten suited
        POCKET_QTS = 61
        # Represents Queen/Ten offsuit
        POCKET_QTO = 62
        # Represents Queen/Nine suited
        POCKET_Q9S = 63
        # Represents Queen/Nine offsuit
        POCKET_Q9O = 64
        # Represents Queen/Eight suited
        POCKET_Q8S = 65
        # Represents Queen/Eight offsuit
        POCKET_Q8O = 66
        # Represents Queen/Seven suited
        POCKET_Q7S = 67
        # Represents Queen/Seven offsuit
        POCKET_Q7O = 68
        # Represents Queen/Six suited
        POCKET_Q6S = 69
        # Represents Queen/Six offsuit
        POCKET_Q6O = 70
        # Represents Queen/Five suited
        POCKET_Q5S = 71
        # Represents Queen/Five offsuit
        POCKET_Q5O = 72
        # Represents Queen/Four suited
        POCKET_Q4S = 73
        # Represents Queen/Four offsuit
        POCKET_Q4O = 74
        # Represents Queen/Three suited
        POCKET_Q3S = 75
        # Represents Queen/Three offsuit
        POCKET_Q3O = 76
        # Represents Queen/Two suited
        POCKET_Q2S = 77
        # Represents Queen/Two offsuit
        POCKET_Q2O = 78
        # Represents Jack/Ten suited
        POCKET_JTS = 79
        # Represents Jack/Ten offsuit
        POCKET_JTO = 80
        # Represents Jack/Nine suited
        POCKET_J9S = 81
        # Represents Jack/Nine offsuit
        POCKET_J9O = 82
        # Represents Jack/Eight suited
        POCKET_J8S = 83
        # Represents Jack/Eight offsuit
        POCKET_J8O = 84
        # Represents Jack/Seven suited
        POCKET_J7S = 85
        # Represents Jack/Seven offsuit
        POCKET_J7O = 86
        # Represents Jack/Six suited
        POCKET_J6S = 87
        # Represents Jack/Six offsuit
        POCKET_J6O = 88
        # Represents Jack/Five suited
        POCKET_J5S = 89
        # Represents Jack/Five offsuit
        POCKET_J5O = 90
        # Represents Jack/Four suited.
        POCKET_J4S = 91
        # Represents Jack/Four offsuit
        POCKET_J4O = 92
        # Represents Jack/Three suited
        POCKET_J3S = 93
        # Represents Jack/Three offsuit
        POCKET_J3O = 94
        # Represents Jack/Two suited.
        POCKET_J2S = 95
        # Represents Jack/Two offsuit
        POCKET_J2O = 96
        # Represents Ten/Nine suited
        POCKET_T9S = 97
        # Represents Ten/Nine offsuit
        POCKET_T9O = 98
        # Represents Ten/Eigth suited
        POCKET_T8S = 99
        # Represents Ten/Eight offsuit
        POCKET_T8O = 100
        # Represents Ten/Seven suited
        POCKET_T7S = 101
        # Represents Ten/Seven offsuit
        POCKET_T7O = 102
        # Represents Ten/Six suited
        POCKET_T6S = 103
        # Represents Ten/Six offsuit
        POCKET_T6O = 104
        # Represents Ten/Five suited
        POCKET_T5S = 105
        # Represents Ten/Five offsuit
        POCKET_T5O = 106
        # Represents Ten/Four suited
        POCKET_T4S = 107
        # Represents Ten/Four offsuit
        POCKET_T4O = 108
        # Represents Ten/Three suited
        POCKET_T3S = 109
        # Represents Ten/Three offsuit
        POCKET_T3O = 110
        # Represents Ten/Two suited
        POCKET_T2S = 111
        # Represents Ten/Two offsuit
        POCKET_T2O = 112
        # Represents Nine/Eight suited
        POCKET_98S = 113
        # Represents Nine/Eight offsuit
        POCKET_98O = 114
        # Represents Nine/Seven suited
        POCKET_97S = 115
        # Represents Nine/Seven offsuit
        POCKET_97O = 116
        # Represents Nine/Six suited
        POCKET_96S = 117
        # Represents Nine/Six offsuit
        POCKET_96O = 118
        # Represents Nine/Five suited
        POCKET_95S = 119
        # Represents Nine/Five offsuit
        POCKET_95O = 120
        # Represents Nine/Four suited
        POCKET_94S = 121
        # Represents Nine/Four offsuit
        POCKET_94O = 122
        # Represents Nine/Three suited
        POCKET_93S = 123
        # Represents Nine/Three offsuit
        POCKET_93O = 124
        # Represents Nine/Two suited
        POCKET_92S = 125
        # Represents Nine/Two offsuit
        POCKET_92O = 126
        # Represents Eight/Seven Suited.
        POCKET_87S = 127
        # Represents Eight/Seven offsuit
        POCKET_87O = 128
        # Represents Eight/Six suited
        POCKET_86S = 129
        # Represents Eight/Six offsuit
        POCKET_86O = 130
        # Represents Eight/Five suited
        POCKET_85S = 131
        # Represents Eight/Five offsuit
        POCKET_85O = 132
        # Represents Eight/Four suited
        POCKET_84S = 133
        # Represents Eight/Four offsuit
        POCKET_84O = 134
        # Represents Eight/Three suited
        POCKET_83S = 135
        # Represents Eight/Three offsuit
        POCKET_83O = 136
        # Represents Eight/Two suited
        POCKET_82S = 137
        # Represents Eight/Two offsuit
        POCKET_82O = 138
        # Represents Seven/Six suited
        POCKET_76S = 139
        # Represents Seven/Six offsuit
        POCKET_76O = 140
        # Represents Seven/Five suited
        POCKET_75S = 141
        # Represents Seven/Five offsuit
        POCKET_75O = 142
        # Represents Seven/Four suited
        POCKET_74S = 143
        # Represents Seven/Four offsuit
        POCKET_74O = 144
        # Represents Seven/Three suited
        POCKET_73S = 145
        # Represents Seven/Three offsuit
        POCKET_73O = 146
        # Represents Seven/Two suited
        POCKET_72S = 147
        # Represents Seven/Two offsuit
        POCKET_72O = 148
        # Represents Six/Five suited
        POCKET_65S = 149
        # Represents Six/Five offsuit
        POCKET_65O = 150
        # Represents Six/Four suited
        POCKET_64S = 151
        # Represents Six/Four offsuit
        POCKET_64O = 152
        # Represents Six/Three suited
        POCKET_63S = 153
        # Represents Six/Three offsuit
        POCKET_63O = 154
        # Represents Six/Two suited
        POCKET_62S = 155
        # Represents Six/Two offsuit
        POCKET_62O = 156
        # Represents Five/Four suited
        POCKET_54S = 157
        # Represents Five/Four offsuit
        POCKET_54O = 158
        # Represents Five/Three suited
        POCKET_53S = 159
        # Represents Five/Three offsuit
        POCKET_53O = 160
        # Represents Five/Two suited
        POCKET_52S = 161
        # Represents Five/Two offsuit
        POCKET_52O = 162
        # Represent Four/Three suited
        POCKET_43S = 163
        # Represents Four/Three offsuit
        POCKET_43O = 164
        # Represents Four/Two suited
        POCKET_42S = 165
        # Represents Four/Two offsuit
        POCKET_42O = 166
        # Represents Three/Two suited
        POCKET_32S = 167
        # Represents Three/Two offsuit
        POCKET_32O = 168
    
    # Pocket169 Mask lookup
    pocketdict = {}
    # Given a pocket pair mask, the PocketHand169Enum cooresponding to this mask
    # will be returned. 
    @staticmethod
    def PocketHand169Type(mask: numpy.uint64):
        if __debug__:
            if (HoldemHand.BitCount(mask) != 2):
                raise Exception("Invalid mask")
                
        # Fill in dictionary
        if len(HoldemHand.pocketdict) == 0:
            i = 0
            while i < len(HoldemHand.Pocket169Table):
                for tmask in HoldemHand.Pocket169Table[i]:
                    HoldemHand.pocketdict[numpy.uint64(tmask)] = HoldemHand.PocketHand169(i)
                i += 1
        
        result = HoldemHand.pocketdict[mask]
        if result:
            return result
            
        return HoldemHand.PocketHand169.NONE
    
    # Enables a foreach command to enumerate all possible ncard hands.
    # numberOfCards - the number of cards in the mask (must be between 1 and 7)
    @staticmethod
    @dispatch(int)
    def Hands(numberOfCards: int):
        a = b = c = d = e = f = g = 0
        _card1 = _n2 = _n3 = _n4 = _n5 = _n6 = numpy.uint32(0)

        if __debug__:
            if numberOfCards < 0 or numberOfCards > 7:
                raise Exception("Invalid number of cards")
        
        if numberOfCards == 7:
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 6:
                _card1 = HoldemHand.__CardMasksTable[a]
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 5:
                    _n2 = _card1 | HoldemHand.__CardMasksTable[b]
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 4:
                        _n3 = _n2 | HoldemHand.__CardMasksTable[c]
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                            _n4 = _n3 | HoldemHand.__CardMasksTable[d]
                            e = d + 1
                            while e < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                                _n5 = _n4 | HoldemHand.__CardMasksTable[e]
                                f = e + 1
                                while f < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                                    _n6 = _n5 | HoldemHand.__CardMasksTable[f]
                                    g = f + 1
                                    while g < HoldemHand.CARD_MASKS_TABLE_SIZE:
                                        yield _n6 | HoldemHand.__CardMasksTable[g]
                                        g += 1

                                    f += 1

                                e += 1

                            d += 1

                        c += 1

                    b += 1

                a += 1
        
        elif numberOfCards == 6:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 5:
                _card1 = HoldemHand.__CardMasksTable[a]
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 4:
                    _n2 = _card1 | HoldemHand.__CardMasksTable[b]
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                        _n3 = _n2 | HoldemHand.__CardMasksTable[c]
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                            _n4 = _n3 | HoldemHand.__CardMasksTable[d]
                            e = d + 1
                            while e < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                                _n5 = _n4 | HoldemHand.__CardMasksTable[e]
                                f = e + 1
                                while f < HoldemHand.CARD_MASKS_TABLE_SIZE:                                    
                                    yield _n5 | HoldemHand.__CardMasksTable[f]
                                    f += 1

                                e += 1

                            d += 1

                        c += 1

                    b += 1

                a += 1
        
        elif numberOfCards == 5:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 4:
                _card1 = HoldemHand.__CardMasksTable[a]
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                    _n2 = _card1 | HoldemHand.__CardMasksTable[b]
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                        _n3 = _n2 | HoldemHand.__CardMasksTable[c]
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                            _n4 = _n3 | HoldemHand.__CardMasksTable[d]
                            e = d + 1
                            while e < HoldemHand.CARD_MASKS_TABLE_SIZE:                                
                                yield _n4 | HoldemHand.__CardMasksTable[e]
                                e += 1

                            d += 1

                        c += 1

                    b += 1

                a += 1
        
        elif numberOfCards == 4:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                _card1 = HoldemHand.__CardMasksTable[a]
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                    _n2 = _card1 | HoldemHand.__CardMasksTable[b]
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                        _n3 = _n2 | HoldemHand.__CardMasksTable[c]
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE:                            
                            yield _n3 | HoldemHand.__CardMasksTable[d]
                            d += 1

                        c += 1

                    b += 1

                a += 1
        
        elif numberOfCards == 3:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                _card1 = HoldemHand.__CardMasksTable[a]
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                    _n2 = _card1 | HoldemHand.__CardMasksTable[b]
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE:
                        yield _n2 | HoldemHand.__CardMasksTable[c]
                        c += 1

                    b += 1

                a += 1
        
        elif numberOfCards == 2:
            a = 0
            while a < HoldemHand.TwoCardMaskTableSize:
                yield HoldemHand.TwoCardMaskTable[a]
                a += 1
        
        elif numberOfCards == 1:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE:
                yield HoldemHand.__CardMasksTable[a]
                a += 1
        
        else:
            yield 0

    # Enables a foreach command to enumerate all possible ncard hands.
    # shared - a bitfield containing the cards that must be in the enumerated hands
    # dead - a bitfield containing the cards that must not be in the enumerated hands
    # numberOfCards - the number of cards in the mask (must be between 1 and 7)
    @staticmethod
    @dispatch(int, int, int)
    def Hands(shared: int, dead: int, numberOfCards: int):
        a = b = c = d = e = f = g = 0
        _card1 = _card2 = _card3 = _card4 = _card5 = _card6 = _card7 = 0
        _n2 = _n3 = _n4 = _n5 = _n6 = 0

        dead |= shared

        numberOfCards -= HoldemHand.BitCount(shared)
        if numberOfCards == 7:
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 6:
                _card1 = HoldemHand.__CardMasksTable[a]
                if (dead & _card1) != 0: 
                    a += 1
                    continue
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 5:
                    _card2 = HoldemHand.__CardMasksTable[b]
                    if (dead & _card2) != 0:                        
                        b += 1
                        continue
                    _n2 = _card1 | _card2
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 4:
                        _card3 = HoldemHand.__CardMasksTable[c]
                        if (dead & _card3) != 0:
                            c += 1
                            continue
                        _n3 = _n2 | _card3
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                            _card4 = HoldemHand.__CardMasksTable[d]
                            if (dead & _card4) != 0:
                                d += 1
                                continue
                            _n4 = _n3 | _card4
                            e = d + 1
                            while e < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                                _card5 = HoldemHand.__CardMasksTable[e]
                                if (dead & _card5) != 0: 
                                    e += 1
                                    continue
                                _n5 = _n4 | _card5

                                f = e + 1
                                while f < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                                    _card6 = HoldemHand.__CardMasksTable[f]
                                    if (dead & _card6) != 0:
                                        f += 1
                                        continue
                                    _n6 = _n5 | _card6
                                    g = f + 1
                                    while g < HoldemHand.CARD_MASKS_TABLE_SIZE:
                                        _card7 = HoldemHand.__CardMasksTable[g]
                                        if (dead & _card7) != 0:
                                            g += 1
                                            continue
                                        yield _n6 | _card7 | shared
                                        g += 1
                                    f += 1
                                e += 1
                            d += 1
                        c += 1
                    b += 1
                a += 1            

        elif numberOfCards == 6:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 5:
                _card1 = HoldemHand.__CardMasksTable[a]
                if (dead & _card1) != 0: 
                    a += 1
                    continue
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 4:
                    _card2 = HoldemHand.__CardMasksTable[b]
                    if (dead & _card2) != 0:                        
                        b += 1
                        continue
                    _n2 = _card1 | _card2
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                        _card3 = HoldemHand.__CardMasksTable[c]
                        if (dead & _card3) != 0:
                            c += 1
                            continue
                        _n3 = _n2 | _card3
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                            _card4 = HoldemHand.__CardMasksTable[d]
                            if (dead & _card4) != 0:
                                d += 1
                                continue
                            _n4 = _n3 | _card4
                            e = d + 1
                            while e < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                                _card5 = HoldemHand.__CardMasksTable[e]
                                if (dead & _card5) != 0: 
                                    e += 1
                                    continue
                                _n5 = _n4 | _card5

                                f = e + 1
                                while f < HoldemHand.CARD_MASKS_TABLE_SIZE:
                                    _card6 = HoldemHand.__CardMasksTable[f]
                                    if (dead & _card6) != 0:
                                        f += 1
                                        continue
                                    yield _n5 | _card6 | shared

                                    f += 1
                                e += 1
                            d += 1
                        c += 1
                    b += 1
                a += 1

        elif numberOfCards == 5:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 4:
                _card1 = HoldemHand.__CardMasksTable[a]
                if (dead & _card1) != 0: 
                    a += 1
                    continue
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                    _card2 = HoldemHand.__CardMasksTable[b]
                    if (dead & _card2) != 0:                        
                        b += 1
                        continue
                    _n2 = _card1 | _card2
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                        _card3 = HoldemHand.__CardMasksTable[c]
                        if (dead & _card3) != 0:
                            c += 1
                            continue
                        _n3 = _n2 | _card3
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                            _card4 = HoldemHand.__CardMasksTable[d]
                            if (dead & _card4) != 0:
                                d += 1
                                continue
                            _n4 = _n3 | _card4
                            e = d + 1
                            while e < HoldemHand.CARD_MASKS_TABLE_SIZE:
                                _card5 = HoldemHand.__CardMasksTable[e]
                                if (dead & _card5) != 0: 
                                    e += 1
                                    continue
                                yield _n4 | _card5 | shared

                                e += 1
                            d += 1
                        c += 1
                    b += 1
                a += 1
            
        elif numberOfCards == 4:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 3:
                _card1 = HoldemHand.__CardMasksTable[a]
                if (dead & _card1) != 0: 
                    a += 1
                    continue
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                    _card2 = HoldemHand.__CardMasksTable[b]
                    if (dead & _card2) != 0:                        
                        b += 1
                        continue
                    _n2 = _card1 | _card2
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                        _card3 = HoldemHand.__CardMasksTable[c]
                        if (dead & _card3) != 0:
                            c += 1
                            continue
                        _n3 = _n2 | _card3
                        d = c + 1
                        while d < HoldemHand.CARD_MASKS_TABLE_SIZE:
                            _card4 = HoldemHand.__CardMasksTable[d]
                            if (dead & _card4) != 0:
                                d += 1
                                continue
                            yield _n3 | _card4 | shared

                            d += 1
                        c += 1
                    b += 1
                a += 1

        elif numberOfCards == 3:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 2:
                _card1 = HoldemHand.__CardMasksTable[a]
                if (dead & _card1) != 0: 
                    a += 1
                    continue
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                    _card2 = HoldemHand.__CardMasksTable[b]
                    if (dead & _card2) != 0:                        
                        b += 1
                        continue
                    _n2 = _card1 | _card2
                    c = b + 1
                    while c < HoldemHand.CARD_MASKS_TABLE_SIZE:
                        _card3 = HoldemHand.__CardMasksTable[c]
                        if (dead & _card3) != 0:
                            c += 1
                            continue
                        yield _n2 | _card3 | shared

                        c += 1
                    b += 1
                a += 1

        elif numberOfCards == 2:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE - 1:
                _card1 = HoldemHand.__CardMasksTable[a]
                if (dead & _card1) != 0:
                    a += 1
                    continue
                b = a + 1
                while b < HoldemHand.CARD_MASKS_TABLE_SIZE:
                    _card2 = HoldemHand.__CardMasksTable[b]
                    if (dead & _card2) != 0:
                        b += 1
                        continue
                    yield _card1 | _card2 | shared
                    b += 1
                a += 1

        elif numberOfCards == 1:
            a = 0
            while a < HoldemHand.CARD_MASKS_TABLE_SIZE:
                _card1 = HoldemHand.__CardMasksTable[a]
                if (dead & _card1) != 0:
                    a += 1
                    continue
                yield _card1 | shared
                a += 1
        elif numberOfCards == 0:
            yield shared
        else:
            yield 0

    # This method allows a foreach statement to iterate through each 
    # card in a card mask
    @staticmethod
    def Cards(mask: int):
        i = 51
        while i >= 0:
            if ((1 << i) & mask) != 0:
                yield HoldemHand.__CardTable[i]
            i -= 1
        
    # This method randomly picks from a list of possible masks
    # list - The list of masks to pick from
    # A mask containing cards that must not be chosen
    # The number of cards to return
    @staticmethod
    # @dispatch([], int, int)
    def RandomHandFromList(list, dead: int, ncards: int):
        mask = 0
        if __debug__:
            if not list or len(list) == 0:
                raise Exception("List of masks to pick from is undefined")
            
            if ncards <= 1 or ncards > 7:
                raise Exception("Number of cards to return is undefined")
        
        mask = list[random.randint(0, len(list) - 1)]
        while mask & dead != 0:
            mask = list[random.randint(0, len(list) - 1)]
        
        if __debug__:
            if HoldemHand.BitCount(mask) > ncards:
                raise Exception("Invalid ncards")
        
        return HoldemHand.RandomHand(mask, dead, ncards)
    
    # Returns a random mask with the specified number of cards and constrained
    # to not contain any of the passed dead cards
    # shared 
    # dead - Mask for the cards that must not be returned
    # ncards - The number of cards to return in this mask    
    @staticmethod
    @dispatch(int, int, int)
    def RandomHand(shared: int, dead: int, ncards: int):
        mask = shared
        card = 0
        count = ncards - HoldemHand.BitCount(shared)

        i = 0
        while i < count:
            card = 1 << random.randint(1, 52)
            while ((dead | mask) & card) != 0:
                card = 1 << random.randint(1, 52)
            mask |= card
            i += 1
        
        return mask | shared
    
    # Returns a randomly generated mask that doesn't include any of the cards in the
    # dead card mask. The mask will return the number of card in the ncards argument
    # dead - The mask of cards that may not be used in the generated mask
    # ncards - The number of cards to return in the generated mask
    @staticmethod
    @dispatch(int, int)
    def RandomHand(dead: int, ncards: int):
        return HoldemHand.RandomHand(0, dead, ncards)
